/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// ArtifactoryArtifactRepository defines the controller configuration for an artifactory artifact repository
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.ArtifactoryArtifactRepository")]
    public partial class IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository" /> class.
        /// </summary>
        /// <param name="keyFormat">KeyFormat defines the format of how to store keys and can reference workflow variables..</param>
        /// <param name="passwordSecret">passwordSecret.</param>
        /// <param name="repoURL">RepoURL is the url for artifactory repo..</param>
        /// <param name="usernameSecret">usernameSecret.</param>
        public IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository(string keyFormat = default(string), IoK8sApiCoreV1SecretKeySelector passwordSecret = default(IoK8sApiCoreV1SecretKeySelector), string repoURL = default(string), IoK8sApiCoreV1SecretKeySelector usernameSecret = default(IoK8sApiCoreV1SecretKeySelector))
        {
            this.KeyFormat = keyFormat;
            this.PasswordSecret = passwordSecret;
            this.RepoURL = repoURL;
            this.UsernameSecret = usernameSecret;
        }

        /// <summary>
        /// KeyFormat defines the format of how to store keys and can reference workflow variables.
        /// </summary>
        /// <value>KeyFormat defines the format of how to store keys and can reference workflow variables.</value>
        [DataMember(Name = "keyFormat", EmitDefaultValue = false)]
        public string KeyFormat { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSecret
        /// </summary>
        [DataMember(Name = "passwordSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector PasswordSecret { get; set; }

        /// <summary>
        /// RepoURL is the url for artifactory repo.
        /// </summary>
        /// <value>RepoURL is the url for artifactory repo.</value>
        [DataMember(Name = "repoURL", EmitDefaultValue = false)]
        public string RepoURL { get; set; }

        /// <summary>
        /// Gets or Sets UsernameSecret
        /// </summary>
        [DataMember(Name = "usernameSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector UsernameSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository {\n");
            sb.Append("  KeyFormat: ").Append(KeyFormat).Append("\n");
            sb.Append("  PasswordSecret: ").Append(PasswordSecret).Append("\n");
            sb.Append("  RepoURL: ").Append(RepoURL).Append("\n");
            sb.Append("  UsernameSecret: ").Append(UsernameSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
