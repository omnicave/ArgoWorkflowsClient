/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// IoArgoprojEventsV1alpha1CalendarEventSource
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.CalendarEventSource")]
    public partial class IoArgoprojEventsV1alpha1CalendarEventSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1CalendarEventSource" /> class.
        /// </summary>
        /// <param name="exclusionDates">ExclusionDates defines the list of DATE-TIME exceptions for recurring events..</param>
        /// <param name="filter">filter.</param>
        /// <param name="interval">interval.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="persistence">persistence.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="timezone">timezone.</param>
        public IoArgoprojEventsV1alpha1CalendarEventSource(List<string> exclusionDates = default(List<string>), IoArgoprojEventsV1alpha1EventSourceFilter filter = default(IoArgoprojEventsV1alpha1EventSourceFilter), string interval = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), IoArgoprojEventsV1alpha1EventPersistence persistence = default(IoArgoprojEventsV1alpha1EventPersistence), string schedule = default(string), string timezone = default(string))
        {
            this.ExclusionDates = exclusionDates;
            this.Filter = filter;
            this.Interval = interval;
            this.Metadata = metadata;
            this.Persistence = persistence;
            this.Schedule = schedule;
            this.Timezone = timezone;
        }

        /// <summary>
        /// ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
        /// </summary>
        /// <value>ExclusionDates defines the list of DATE-TIME exceptions for recurring events.</value>
        [DataMember(Name = "exclusionDates", EmitDefaultValue = false)]
        public List<string> ExclusionDates { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1EventSourceFilter Filter { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public string Interval { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Persistence
        /// </summary>
        [DataMember(Name = "persistence", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1EventPersistence Persistence { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1CalendarEventSource {\n");
            sb.Append("  ExclusionDates: ").Append(ExclusionDates).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Persistence: ").Append(Persistence).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
