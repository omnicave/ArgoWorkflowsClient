/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// IoArgoprojEventsV1alpha1EventContext
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.EventContext")]
    public partial class IoArgoprojEventsV1alpha1EventContext : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1EventContext" /> class.
        /// </summary>
        /// <param name="datacontenttype">DataContentType - A MIME (RFC2046) string describing the media type of &#x60;data&#x60;..</param>
        /// <param name="id">ID of the event; must be non-empty and unique within the scope of the producer..</param>
        /// <param name="source">Source - A URI describing the event producer..</param>
        /// <param name="specversion">SpecVersion - The version of the CloudEvents specification used by the io.argoproj.workflow.v1alpha1..</param>
        /// <param name="subject">subject.</param>
        /// <param name="time">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers..</param>
        /// <param name="type">Type - The type of the occurrence which has happened..</param>
        public IoArgoprojEventsV1alpha1EventContext(string datacontenttype = default(string), string id = default(string), string source = default(string), string specversion = default(string), string subject = default(string), DateTime time = default(DateTime), string type = default(string))
        {
            this.Datacontenttype = datacontenttype;
            this.Id = id;
            this.Source = source;
            this.Specversion = specversion;
            this.Subject = subject;
            this.Time = time;
            this.Type = type;
        }

        /// <summary>
        /// DataContentType - A MIME (RFC2046) string describing the media type of &#x60;data&#x60;.
        /// </summary>
        /// <value>DataContentType - A MIME (RFC2046) string describing the media type of &#x60;data&#x60;.</value>
        [DataMember(Name = "datacontenttype", EmitDefaultValue = false)]
        public string Datacontenttype { get; set; }

        /// <summary>
        /// ID of the event; must be non-empty and unique within the scope of the producer.
        /// </summary>
        /// <value>ID of the event; must be non-empty and unique within the scope of the producer.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Source - A URI describing the event producer.
        /// </summary>
        /// <value>Source - A URI describing the event producer.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// SpecVersion - The version of the CloudEvents specification used by the io.argoproj.workflow.v1alpha1.
        /// </summary>
        /// <value>SpecVersion - The version of the CloudEvents specification used by the io.argoproj.workflow.v1alpha1.</value>
        [DataMember(Name = "specversion", EmitDefaultValue = false)]
        public string Specversion { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Type - The type of the occurrence which has happened.
        /// </summary>
        /// <value>Type - The type of the occurrence which has happened.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1EventContext {\n");
            sb.Append("  Datacontenttype: ").Append(Datacontenttype).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Specversion: ").Append(Specversion).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
