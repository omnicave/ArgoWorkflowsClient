/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// IoArgoprojEventsV1alpha1AMQPEventSource
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.AMQPEventSource")]
    public partial class IoArgoprojEventsV1alpha1AMQPEventSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1AMQPEventSource" /> class.
        /// </summary>
        /// <param name="auth">auth.</param>
        /// <param name="connectionBackoff">connectionBackoff.</param>
        /// <param name="consume">consume.</param>
        /// <param name="exchangeDeclare">exchangeDeclare.</param>
        /// <param name="exchangeName">exchangeName.</param>
        /// <param name="exchangeType">exchangeType.</param>
        /// <param name="filter">filter.</param>
        /// <param name="jsonBody">jsonBody.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="queueBind">queueBind.</param>
        /// <param name="queueDeclare">queueDeclare.</param>
        /// <param name="routingKey">routingKey.</param>
        /// <param name="tls">tls.</param>
        /// <param name="url">url.</param>
        /// <param name="urlSecret">urlSecret.</param>
        public IoArgoprojEventsV1alpha1AMQPEventSource(IoArgoprojEventsV1alpha1BasicAuth auth = default(IoArgoprojEventsV1alpha1BasicAuth), IoArgoprojEventsV1alpha1Backoff connectionBackoff = default(IoArgoprojEventsV1alpha1Backoff), IoArgoprojEventsV1alpha1AMQPConsumeConfig consume = default(IoArgoprojEventsV1alpha1AMQPConsumeConfig), IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig exchangeDeclare = default(IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig), string exchangeName = default(string), string exchangeType = default(string), IoArgoprojEventsV1alpha1EventSourceFilter filter = default(IoArgoprojEventsV1alpha1EventSourceFilter), bool jsonBody = default(bool), Dictionary<string, string> metadata = default(Dictionary<string, string>), IoArgoprojEventsV1alpha1AMQPQueueBindConfig queueBind = default(IoArgoprojEventsV1alpha1AMQPQueueBindConfig), IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig queueDeclare = default(IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig), string routingKey = default(string), IoArgoprojEventsV1alpha1TLSConfig tls = default(IoArgoprojEventsV1alpha1TLSConfig), string url = default(string), IoK8sApiCoreV1SecretKeySelector urlSecret = default(IoK8sApiCoreV1SecretKeySelector))
        {
            this.Auth = auth;
            this.ConnectionBackoff = connectionBackoff;
            this.Consume = consume;
            this.ExchangeDeclare = exchangeDeclare;
            this.ExchangeName = exchangeName;
            this.ExchangeType = exchangeType;
            this.Filter = filter;
            this.JsonBody = jsonBody;
            this.Metadata = metadata;
            this.QueueBind = queueBind;
            this.QueueDeclare = queueDeclare;
            this.RoutingKey = routingKey;
            this.Tls = tls;
            this.Url = url;
            this.UrlSecret = urlSecret;
        }

        /// <summary>
        /// Gets or Sets Auth
        /// </summary>
        [DataMember(Name = "auth", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1BasicAuth Auth { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionBackoff
        /// </summary>
        [DataMember(Name = "connectionBackoff", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1Backoff ConnectionBackoff { get; set; }

        /// <summary>
        /// Gets or Sets Consume
        /// </summary>
        [DataMember(Name = "consume", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1AMQPConsumeConfig Consume { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeDeclare
        /// </summary>
        [DataMember(Name = "exchangeDeclare", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig ExchangeDeclare { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeName
        /// </summary>
        [DataMember(Name = "exchangeName", EmitDefaultValue = false)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeType
        /// </summary>
        [DataMember(Name = "exchangeType", EmitDefaultValue = false)]
        public string ExchangeType { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1EventSourceFilter Filter { get; set; }

        /// <summary>
        /// Gets or Sets JsonBody
        /// </summary>
        [DataMember(Name = "jsonBody", EmitDefaultValue = true)]
        public bool JsonBody { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets QueueBind
        /// </summary>
        [DataMember(Name = "queueBind", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1AMQPQueueBindConfig QueueBind { get; set; }

        /// <summary>
        /// Gets or Sets QueueDeclare
        /// </summary>
        [DataMember(Name = "queueDeclare", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig QueueDeclare { get; set; }

        /// <summary>
        /// Gets or Sets RoutingKey
        /// </summary>
        [DataMember(Name = "routingKey", EmitDefaultValue = false)]
        public string RoutingKey { get; set; }

        /// <summary>
        /// Gets or Sets Tls
        /// </summary>
        [DataMember(Name = "tls", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1TLSConfig Tls { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UrlSecret
        /// </summary>
        [DataMember(Name = "urlSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector UrlSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1AMQPEventSource {\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  ConnectionBackoff: ").Append(ConnectionBackoff).Append("\n");
            sb.Append("  Consume: ").Append(Consume).Append("\n");
            sb.Append("  ExchangeDeclare: ").Append(ExchangeDeclare).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("  ExchangeType: ").Append(ExchangeType).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  JsonBody: ").Append(JsonBody).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  QueueBind: ").Append(QueueBind).Append("\n");
            sb.Append("  QueueDeclare: ").Append(QueueDeclare).Append("\n");
            sb.Append("  RoutingKey: ").Append(RoutingKey).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlSecret: ").Append(UrlSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
