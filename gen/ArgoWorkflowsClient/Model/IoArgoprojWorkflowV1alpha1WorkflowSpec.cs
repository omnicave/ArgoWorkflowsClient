/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// WorkflowSpec is the specification of a Workflow.
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.WorkflowSpec")]
    public partial class IoArgoprojWorkflowV1alpha1WorkflowSpec : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1WorkflowSpec" /> class.
        /// </summary>
        /// <param name="activeDeadlineSeconds">Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the io.argoproj.workflow.v1alpha1. A value of zero is used to terminate a Running workflow.</param>
        /// <param name="affinity">affinity.</param>
        /// <param name="archiveLogs">ArchiveLogs indicates if the container logs should be archived.</param>
        /// <param name="arguments">arguments.</param>
        /// <param name="artifactGC">artifactGC.</param>
        /// <param name="artifactRepositoryRef">artifactRepositoryRef.</param>
        /// <param name="automountServiceAccountToken">AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false..</param>
        /// <param name="dnsConfig">dnsConfig.</param>
        /// <param name="dnsPolicy">Set DNS policy for the pod. Defaults to \&quot;ClusterFirst\&quot;. Valid values are &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39; or &#39;None&#39;. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to &#39;ClusterFirstWithHostNet&#39;..</param>
        /// <param name="entrypoint">Entrypoint is a template reference to the starting point of the io.argoproj.workflow.v1alpha1..</param>
        /// <param name="executor">executor.</param>
        /// <param name="hooks">Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step.</param>
        /// <param name="hostAliases">hostAliases.</param>
        /// <param name="hostNetwork">Host networking requested for this workflow pod. Default to false..</param>
        /// <param name="imagePullSecrets">ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod.</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="nodeSelector">NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template..</param>
        /// <param name="onExit">OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary io.argoproj.workflow.v1alpha1..</param>
        /// <param name="parallelism">Parallelism limits the max total parallel pods that can execute at the same time in a workflow.</param>
        /// <param name="podDisruptionBudget">podDisruptionBudget.</param>
        /// <param name="podGC">podGC.</param>
        /// <param name="podMetadata">podMetadata.</param>
        /// <param name="podPriority">Priority to apply to workflow pods. DEPRECATED: Use PodPriorityClassName instead..</param>
        /// <param name="podPriorityClassName">PriorityClassName to apply to workflow pods..</param>
        /// <param name="podSpecPatch">PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits)..</param>
        /// <param name="priority">Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first..</param>
        /// <param name="retryStrategy">retryStrategy.</param>
        /// <param name="schedulerName">Set scheduler name for all pods. Will be overridden if container/script template&#39;s scheduler name is set. Default scheduler will be used if neither specified..</param>
        /// <param name="securityContext">securityContext.</param>
        /// <param name="serviceAccountName">ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as..</param>
        /// <param name="shutdown">Shutdown will shutdown the workflow according to its ShutdownStrategy.</param>
        /// <param name="suspend">Suspend will suspend the workflow and prevent execution of any future steps in the workflow.</param>
        /// <param name="synchronization">synchronization.</param>
        /// <param name="templateDefaults">templateDefaults.</param>
        /// <param name="templates">Templates is a list of workflow templates used in a workflow.</param>
        /// <param name="tolerations">Tolerations to apply to workflow pods..</param>
        /// <param name="ttlStrategy">ttlStrategy.</param>
        /// <param name="volumeClaimGC">volumeClaimGC.</param>
        /// <param name="volumeClaimTemplates">VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow.</param>
        /// <param name="volumes">Volumes is a list of volumes that can be mounted by containers in a io.argoproj.workflow.v1alpha1..</param>
        /// <param name="workflowMetadata">workflowMetadata.</param>
        /// <param name="workflowTemplateRef">workflowTemplateRef.</param>
        public IoArgoprojWorkflowV1alpha1WorkflowSpec(int activeDeadlineSeconds = default(int), IoK8sApiCoreV1Affinity affinity = default(IoK8sApiCoreV1Affinity), bool archiveLogs = default(bool), IoArgoprojWorkflowV1alpha1Arguments arguments = default(IoArgoprojWorkflowV1alpha1Arguments), IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC artifactGC = default(IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC), IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef artifactRepositoryRef = default(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef), bool automountServiceAccountToken = default(bool), IoK8sApiCoreV1PodDNSConfig dnsConfig = default(IoK8sApiCoreV1PodDNSConfig), string dnsPolicy = default(string), string entrypoint = default(string), IoArgoprojWorkflowV1alpha1ExecutorConfig executor = default(IoArgoprojWorkflowV1alpha1ExecutorConfig), Dictionary<string, IoArgoprojWorkflowV1alpha1LifecycleHook> hooks = default(Dictionary<string, IoArgoprojWorkflowV1alpha1LifecycleHook>), List<IoK8sApiCoreV1HostAlias> hostAliases = default(List<IoK8sApiCoreV1HostAlias>), bool hostNetwork = default(bool), List<IoK8sApiCoreV1LocalObjectReference> imagePullSecrets = default(List<IoK8sApiCoreV1LocalObjectReference>), IoArgoprojWorkflowV1alpha1Metrics metrics = default(IoArgoprojWorkflowV1alpha1Metrics), Dictionary<string, string> nodeSelector = default(Dictionary<string, string>), string onExit = default(string), int parallelism = default(int), IoK8sApiPolicyV1PodDisruptionBudgetSpec podDisruptionBudget = default(IoK8sApiPolicyV1PodDisruptionBudgetSpec), IoArgoprojWorkflowV1alpha1PodGC podGC = default(IoArgoprojWorkflowV1alpha1PodGC), IoArgoprojWorkflowV1alpha1Metadata podMetadata = default(IoArgoprojWorkflowV1alpha1Metadata), int podPriority = default(int), string podPriorityClassName = default(string), string podSpecPatch = default(string), int priority = default(int), IoArgoprojWorkflowV1alpha1RetryStrategy retryStrategy = default(IoArgoprojWorkflowV1alpha1RetryStrategy), string schedulerName = default(string), IoK8sApiCoreV1PodSecurityContext securityContext = default(IoK8sApiCoreV1PodSecurityContext), string serviceAccountName = default(string), string shutdown = default(string), bool suspend = default(bool), IoArgoprojWorkflowV1alpha1Synchronization synchronization = default(IoArgoprojWorkflowV1alpha1Synchronization), IoArgoprojWorkflowV1alpha1Template templateDefaults = default(IoArgoprojWorkflowV1alpha1Template), List<IoArgoprojWorkflowV1alpha1Template> templates = default(List<IoArgoprojWorkflowV1alpha1Template>), List<IoK8sApiCoreV1Toleration> tolerations = default(List<IoK8sApiCoreV1Toleration>), IoArgoprojWorkflowV1alpha1TTLStrategy ttlStrategy = default(IoArgoprojWorkflowV1alpha1TTLStrategy), IoArgoprojWorkflowV1alpha1VolumeClaimGC volumeClaimGC = default(IoArgoprojWorkflowV1alpha1VolumeClaimGC), List<IoK8sApiCoreV1PersistentVolumeClaim> volumeClaimTemplates = default(List<IoK8sApiCoreV1PersistentVolumeClaim>), List<IoK8sApiCoreV1Volume> volumes = default(List<IoK8sApiCoreV1Volume>), IoArgoprojWorkflowV1alpha1WorkflowMetadata workflowMetadata = default(IoArgoprojWorkflowV1alpha1WorkflowMetadata), IoArgoprojWorkflowV1alpha1WorkflowTemplateRef workflowTemplateRef = default(IoArgoprojWorkflowV1alpha1WorkflowTemplateRef))
        {
            this.ActiveDeadlineSeconds = activeDeadlineSeconds;
            this.Affinity = affinity;
            this.ArchiveLogs = archiveLogs;
            this.Arguments = arguments;
            this.ArtifactGC = artifactGC;
            this.ArtifactRepositoryRef = artifactRepositoryRef;
            this.AutomountServiceAccountToken = automountServiceAccountToken;
            this.DnsConfig = dnsConfig;
            this.DnsPolicy = dnsPolicy;
            this.Entrypoint = entrypoint;
            this.Executor = executor;
            this.Hooks = hooks;
            this.HostAliases = hostAliases;
            this.HostNetwork = hostNetwork;
            this.ImagePullSecrets = imagePullSecrets;
            this.Metrics = metrics;
            this.NodeSelector = nodeSelector;
            this.OnExit = onExit;
            this.Parallelism = parallelism;
            this.PodDisruptionBudget = podDisruptionBudget;
            this.PodGC = podGC;
            this.PodMetadata = podMetadata;
            this.PodPriority = podPriority;
            this.PodPriorityClassName = podPriorityClassName;
            this.PodSpecPatch = podSpecPatch;
            this.Priority = priority;
            this.RetryStrategy = retryStrategy;
            this.SchedulerName = schedulerName;
            this.SecurityContext = securityContext;
            this.ServiceAccountName = serviceAccountName;
            this.Shutdown = shutdown;
            this.Suspend = suspend;
            this.Synchronization = synchronization;
            this.TemplateDefaults = templateDefaults;
            this.Templates = templates;
            this.Tolerations = tolerations;
            this.TtlStrategy = ttlStrategy;
            this.VolumeClaimGC = volumeClaimGC;
            this.VolumeClaimTemplates = volumeClaimTemplates;
            this.Volumes = volumes;
            this.WorkflowMetadata = workflowMetadata;
            this.WorkflowTemplateRef = workflowTemplateRef;
        }

        /// <summary>
        /// Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the io.argoproj.workflow.v1alpha1. A value of zero is used to terminate a Running workflow
        /// </summary>
        /// <value>Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the io.argoproj.workflow.v1alpha1. A value of zero is used to terminate a Running workflow</value>
        [DataMember(Name = "activeDeadlineSeconds", EmitDefaultValue = false)]
        public int ActiveDeadlineSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Affinity
        /// </summary>
        [DataMember(Name = "affinity", EmitDefaultValue = false)]
        public IoK8sApiCoreV1Affinity Affinity { get; set; }

        /// <summary>
        /// ArchiveLogs indicates if the container logs should be archived
        /// </summary>
        /// <value>ArchiveLogs indicates if the container logs should be archived</value>
        [DataMember(Name = "archiveLogs", EmitDefaultValue = true)]
        public bool ArchiveLogs { get; set; }

        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name = "arguments", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Arguments Arguments { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactGC
        /// </summary>
        [DataMember(Name = "artifactGC", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC ArtifactGC { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactRepositoryRef
        /// </summary>
        [DataMember(Name = "artifactRepositoryRef", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef ArtifactRepositoryRef { get; set; }

        /// <summary>
        /// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.
        /// </summary>
        /// <value>AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.</value>
        [DataMember(Name = "automountServiceAccountToken", EmitDefaultValue = true)]
        public bool AutomountServiceAccountToken { get; set; }

        /// <summary>
        /// Gets or Sets DnsConfig
        /// </summary>
        [DataMember(Name = "dnsConfig", EmitDefaultValue = false)]
        public IoK8sApiCoreV1PodDNSConfig DnsConfig { get; set; }

        /// <summary>
        /// Set DNS policy for the pod. Defaults to \&quot;ClusterFirst\&quot;. Valid values are &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39; or &#39;None&#39;. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to &#39;ClusterFirstWithHostNet&#39;.
        /// </summary>
        /// <value>Set DNS policy for the pod. Defaults to \&quot;ClusterFirst\&quot;. Valid values are &#39;ClusterFirstWithHostNet&#39;, &#39;ClusterFirst&#39;, &#39;Default&#39; or &#39;None&#39;. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to &#39;ClusterFirstWithHostNet&#39;.</value>
        [DataMember(Name = "dnsPolicy", EmitDefaultValue = false)]
        public string DnsPolicy { get; set; }

        /// <summary>
        /// Entrypoint is a template reference to the starting point of the io.argoproj.workflow.v1alpha1.
        /// </summary>
        /// <value>Entrypoint is a template reference to the starting point of the io.argoproj.workflow.v1alpha1.</value>
        [DataMember(Name = "entrypoint", EmitDefaultValue = false)]
        public string Entrypoint { get; set; }

        /// <summary>
        /// Gets or Sets Executor
        /// </summary>
        [DataMember(Name = "executor", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ExecutorConfig Executor { get; set; }

        /// <summary>
        /// Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step
        /// </summary>
        /// <value>Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step</value>
        [DataMember(Name = "hooks", EmitDefaultValue = false)]
        public Dictionary<string, IoArgoprojWorkflowV1alpha1LifecycleHook> Hooks { get; set; }

        /// <summary>
        /// Gets or Sets HostAliases
        /// </summary>
        [DataMember(Name = "hostAliases", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1HostAlias> HostAliases { get; set; }

        /// <summary>
        /// Host networking requested for this workflow pod. Default to false.
        /// </summary>
        /// <value>Host networking requested for this workflow pod. Default to false.</value>
        [DataMember(Name = "hostNetwork", EmitDefaultValue = true)]
        public bool HostNetwork { get; set; }

        /// <summary>
        /// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        /// </summary>
        /// <value>ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod</value>
        [DataMember(Name = "imagePullSecrets", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1LocalObjectReference> ImagePullSecrets { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Metrics Metrics { get; set; }

        /// <summary>
        /// NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.
        /// </summary>
        /// <value>NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.</value>
        [DataMember(Name = "nodeSelector", EmitDefaultValue = false)]
        public Dictionary<string, string> NodeSelector { get; set; }

        /// <summary>
        /// OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary io.argoproj.workflow.v1alpha1.
        /// </summary>
        /// <value>OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary io.argoproj.workflow.v1alpha1.</value>
        [DataMember(Name = "onExit", EmitDefaultValue = false)]
        public string OnExit { get; set; }

        /// <summary>
        /// Parallelism limits the max total parallel pods that can execute at the same time in a workflow
        /// </summary>
        /// <value>Parallelism limits the max total parallel pods that can execute at the same time in a workflow</value>
        [DataMember(Name = "parallelism", EmitDefaultValue = false)]
        public int Parallelism { get; set; }

        /// <summary>
        /// Gets or Sets PodDisruptionBudget
        /// </summary>
        [DataMember(Name = "podDisruptionBudget", EmitDefaultValue = false)]
        public IoK8sApiPolicyV1PodDisruptionBudgetSpec PodDisruptionBudget { get; set; }

        /// <summary>
        /// Gets or Sets PodGC
        /// </summary>
        [DataMember(Name = "podGC", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1PodGC PodGC { get; set; }

        /// <summary>
        /// Gets or Sets PodMetadata
        /// </summary>
        [DataMember(Name = "podMetadata", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Metadata PodMetadata { get; set; }

        /// <summary>
        /// Priority to apply to workflow pods. DEPRECATED: Use PodPriorityClassName instead.
        /// </summary>
        /// <value>Priority to apply to workflow pods. DEPRECATED: Use PodPriorityClassName instead.</value>
        [DataMember(Name = "podPriority", EmitDefaultValue = false)]
        public int PodPriority { get; set; }

        /// <summary>
        /// PriorityClassName to apply to workflow pods.
        /// </summary>
        /// <value>PriorityClassName to apply to workflow pods.</value>
        [DataMember(Name = "podPriorityClassName", EmitDefaultValue = false)]
        public string PodPriorityClassName { get; set; }

        /// <summary>
        /// PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).
        /// </summary>
        /// <value>PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).</value>
        [DataMember(Name = "podSpecPatch", EmitDefaultValue = false)]
        public string PodSpecPatch { get; set; }

        /// <summary>
        /// Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.
        /// </summary>
        /// <value>Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets RetryStrategy
        /// </summary>
        [DataMember(Name = "retryStrategy", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1RetryStrategy RetryStrategy { get; set; }

        /// <summary>
        /// Set scheduler name for all pods. Will be overridden if container/script template&#39;s scheduler name is set. Default scheduler will be used if neither specified.
        /// </summary>
        /// <value>Set scheduler name for all pods. Will be overridden if container/script template&#39;s scheduler name is set. Default scheduler will be used if neither specified.</value>
        [DataMember(Name = "schedulerName", EmitDefaultValue = false)]
        public string SchedulerName { get; set; }

        /// <summary>
        /// Gets or Sets SecurityContext
        /// </summary>
        [DataMember(Name = "securityContext", EmitDefaultValue = false)]
        public IoK8sApiCoreV1PodSecurityContext SecurityContext { get; set; }

        /// <summary>
        /// ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.
        /// </summary>
        /// <value>ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.</value>
        [DataMember(Name = "serviceAccountName", EmitDefaultValue = false)]
        public string ServiceAccountName { get; set; }

        /// <summary>
        /// Shutdown will shutdown the workflow according to its ShutdownStrategy
        /// </summary>
        /// <value>Shutdown will shutdown the workflow according to its ShutdownStrategy</value>
        [DataMember(Name = "shutdown", EmitDefaultValue = false)]
        public string Shutdown { get; set; }

        /// <summary>
        /// Suspend will suspend the workflow and prevent execution of any future steps in the workflow
        /// </summary>
        /// <value>Suspend will suspend the workflow and prevent execution of any future steps in the workflow</value>
        [DataMember(Name = "suspend", EmitDefaultValue = true)]
        public bool Suspend { get; set; }

        /// <summary>
        /// Gets or Sets Synchronization
        /// </summary>
        [DataMember(Name = "synchronization", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Synchronization Synchronization { get; set; }

        /// <summary>
        /// Gets or Sets TemplateDefaults
        /// </summary>
        [DataMember(Name = "templateDefaults", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Template TemplateDefaults { get; set; }

        /// <summary>
        /// Templates is a list of workflow templates used in a workflow
        /// </summary>
        /// <value>Templates is a list of workflow templates used in a workflow</value>
        [DataMember(Name = "templates", EmitDefaultValue = false)]
        public List<IoArgoprojWorkflowV1alpha1Template> Templates { get; set; }

        /// <summary>
        /// Tolerations to apply to workflow pods.
        /// </summary>
        /// <value>Tolerations to apply to workflow pods.</value>
        [DataMember(Name = "tolerations", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1Toleration> Tolerations { get; set; }

        /// <summary>
        /// Gets or Sets TtlStrategy
        /// </summary>
        [DataMember(Name = "ttlStrategy", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1TTLStrategy TtlStrategy { get; set; }

        /// <summary>
        /// Gets or Sets VolumeClaimGC
        /// </summary>
        [DataMember(Name = "volumeClaimGC", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1VolumeClaimGC VolumeClaimGC { get; set; }

        /// <summary>
        /// VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow
        /// </summary>
        /// <value>VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow</value>
        [DataMember(Name = "volumeClaimTemplates", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1PersistentVolumeClaim> VolumeClaimTemplates { get; set; }

        /// <summary>
        /// Volumes is a list of volumes that can be mounted by containers in a io.argoproj.workflow.v1alpha1.
        /// </summary>
        /// <value>Volumes is a list of volumes that can be mounted by containers in a io.argoproj.workflow.v1alpha1.</value>
        [DataMember(Name = "volumes", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1Volume> Volumes { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowMetadata
        /// </summary>
        [DataMember(Name = "workflowMetadata", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1WorkflowMetadata WorkflowMetadata { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowTemplateRef
        /// </summary>
        [DataMember(Name = "workflowTemplateRef", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1WorkflowTemplateRef WorkflowTemplateRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1WorkflowSpec {\n");
            sb.Append("  ActiveDeadlineSeconds: ").Append(ActiveDeadlineSeconds).Append("\n");
            sb.Append("  Affinity: ").Append(Affinity).Append("\n");
            sb.Append("  ArchiveLogs: ").Append(ArchiveLogs).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  ArtifactGC: ").Append(ArtifactGC).Append("\n");
            sb.Append("  ArtifactRepositoryRef: ").Append(ArtifactRepositoryRef).Append("\n");
            sb.Append("  AutomountServiceAccountToken: ").Append(AutomountServiceAccountToken).Append("\n");
            sb.Append("  DnsConfig: ").Append(DnsConfig).Append("\n");
            sb.Append("  DnsPolicy: ").Append(DnsPolicy).Append("\n");
            sb.Append("  Entrypoint: ").Append(Entrypoint).Append("\n");
            sb.Append("  Executor: ").Append(Executor).Append("\n");
            sb.Append("  Hooks: ").Append(Hooks).Append("\n");
            sb.Append("  HostAliases: ").Append(HostAliases).Append("\n");
            sb.Append("  HostNetwork: ").Append(HostNetwork).Append("\n");
            sb.Append("  ImagePullSecrets: ").Append(ImagePullSecrets).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  NodeSelector: ").Append(NodeSelector).Append("\n");
            sb.Append("  OnExit: ").Append(OnExit).Append("\n");
            sb.Append("  Parallelism: ").Append(Parallelism).Append("\n");
            sb.Append("  PodDisruptionBudget: ").Append(PodDisruptionBudget).Append("\n");
            sb.Append("  PodGC: ").Append(PodGC).Append("\n");
            sb.Append("  PodMetadata: ").Append(PodMetadata).Append("\n");
            sb.Append("  PodPriority: ").Append(PodPriority).Append("\n");
            sb.Append("  PodPriorityClassName: ").Append(PodPriorityClassName).Append("\n");
            sb.Append("  PodSpecPatch: ").Append(PodSpecPatch).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  RetryStrategy: ").Append(RetryStrategy).Append("\n");
            sb.Append("  SchedulerName: ").Append(SchedulerName).Append("\n");
            sb.Append("  SecurityContext: ").Append(SecurityContext).Append("\n");
            sb.Append("  ServiceAccountName: ").Append(ServiceAccountName).Append("\n");
            sb.Append("  Shutdown: ").Append(Shutdown).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("  Synchronization: ").Append(Synchronization).Append("\n");
            sb.Append("  TemplateDefaults: ").Append(TemplateDefaults).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Tolerations: ").Append(Tolerations).Append("\n");
            sb.Append("  TtlStrategy: ").Append(TtlStrategy).Append("\n");
            sb.Append("  VolumeClaimGC: ").Append(VolumeClaimGC).Append("\n");
            sb.Append("  VolumeClaimTemplates: ").Append(VolumeClaimTemplates).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  WorkflowMetadata: ").Append(WorkflowMetadata).Append("\n");
            sb.Append("  WorkflowTemplateRef: ").Append(WorkflowTemplateRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
