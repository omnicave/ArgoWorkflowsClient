/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// IoArgoprojEventsV1alpha1SensorSpec
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.SensorSpec")]
    public partial class IoArgoprojEventsV1alpha1SensorSpec : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1SensorSpec" /> class.
        /// </summary>
        /// <param name="dependencies">Dependencies is a list of the events that this sensor is dependent on..</param>
        /// <param name="errorOnFailedRound">ErrorOnFailedRound if set to true, marks sensor state as &#x60;error&#x60; if the previous trigger round fails. Once sensor state is set to &#x60;error&#x60;, no further triggers will be processed..</param>
        /// <param name="eventBusName">eventBusName.</param>
        /// <param name="replicas">replicas.</param>
        /// <param name="template">template.</param>
        /// <param name="triggers">Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor..</param>
        public IoArgoprojEventsV1alpha1SensorSpec(List<IoArgoprojEventsV1alpha1EventDependency> dependencies = default(List<IoArgoprojEventsV1alpha1EventDependency>), bool errorOnFailedRound = default(bool), string eventBusName = default(string), int replicas = default(int), IoArgoprojEventsV1alpha1Template template = default(IoArgoprojEventsV1alpha1Template), List<IoArgoprojEventsV1alpha1Trigger> triggers = default(List<IoArgoprojEventsV1alpha1Trigger>))
        {
            this.Dependencies = dependencies;
            this.ErrorOnFailedRound = errorOnFailedRound;
            this.EventBusName = eventBusName;
            this.Replicas = replicas;
            this.Template = template;
            this.Triggers = triggers;
        }

        /// <summary>
        /// Dependencies is a list of the events that this sensor is dependent on.
        /// </summary>
        /// <value>Dependencies is a list of the events that this sensor is dependent on.</value>
        [DataMember(Name = "dependencies", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1EventDependency> Dependencies { get; set; }

        /// <summary>
        /// ErrorOnFailedRound if set to true, marks sensor state as &#x60;error&#x60; if the previous trigger round fails. Once sensor state is set to &#x60;error&#x60;, no further triggers will be processed.
        /// </summary>
        /// <value>ErrorOnFailedRound if set to true, marks sensor state as &#x60;error&#x60; if the previous trigger round fails. Once sensor state is set to &#x60;error&#x60;, no further triggers will be processed.</value>
        [DataMember(Name = "errorOnFailedRound", EmitDefaultValue = true)]
        public bool ErrorOnFailedRound { get; set; }

        /// <summary>
        /// Gets or Sets EventBusName
        /// </summary>
        [DataMember(Name = "eventBusName", EmitDefaultValue = false)]
        public string EventBusName { get; set; }

        /// <summary>
        /// Gets or Sets Replicas
        /// </summary>
        [DataMember(Name = "replicas", EmitDefaultValue = false)]
        public int Replicas { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1Template Template { get; set; }

        /// <summary>
        /// Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
        /// </summary>
        /// <value>Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.</value>
        [DataMember(Name = "triggers", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1Trigger> Triggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1SensorSpec {\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  ErrorOnFailedRound: ").Append(ErrorOnFailedRound).Append("\n");
            sb.Append("  EventBusName: ").Append(EventBusName).Append("\n");
            sb.Append("  Replicas: ").Append(Replicas).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
