/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// ValueFrom describes a location in which to obtain the value to a parameter
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.ValueFrom")]
    public partial class IoArgoprojWorkflowV1alpha1ValueFrom : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1ValueFrom" /> class.
        /// </summary>
        /// <param name="configMapKeyRef">configMapKeyRef.</param>
        /// <param name="varDefault">Default specifies a value to be used if retrieving the value from the specified source fails.</param>
        /// <param name="varEvent">Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. &#x60;payload.message&#x60;.</param>
        /// <param name="expression">Expression, if defined, is evaluated to specify the value for the parameter.</param>
        /// <param name="jqFilter">JQFilter expression against the resource object in resource templates.</param>
        /// <param name="jsonPath">JSONPath of a resource to retrieve an output parameter value from in resource templates.</param>
        /// <param name="varParameter">Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. &#39;{{steps.mystep.outputs.myparam}}&#39;).</param>
        /// <param name="path">Path in the container to retrieve an output parameter value from in container templates.</param>
        /// <param name="supplied">SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc..</param>
        public IoArgoprojWorkflowV1alpha1ValueFrom(IoK8sApiCoreV1ConfigMapKeySelector configMapKeyRef = default(IoK8sApiCoreV1ConfigMapKeySelector), string varDefault = default(string), string varEvent = default(string), string expression = default(string), string jqFilter = default(string), string jsonPath = default(string), string varParameter = default(string), string path = default(string), Object supplied = default(Object))
        {
            this.ConfigMapKeyRef = configMapKeyRef;
            this.VarDefault = varDefault;
            this.VarEvent = varEvent;
            this.Expression = expression;
            this.JqFilter = jqFilter;
            this.JsonPath = jsonPath;
            this.VarParameter = varParameter;
            this.Path = path;
            this.Supplied = supplied;
        }

        /// <summary>
        /// Gets or Sets ConfigMapKeyRef
        /// </summary>
        [DataMember(Name = "configMapKeyRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1ConfigMapKeySelector ConfigMapKeyRef { get; set; }

        /// <summary>
        /// Default specifies a value to be used if retrieving the value from the specified source fails
        /// </summary>
        /// <value>Default specifies a value to be used if retrieving the value from the specified source fails</value>
        [DataMember(Name = "default", EmitDefaultValue = false)]
        public string VarDefault { get; set; }

        /// <summary>
        /// Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. &#x60;payload.message&#x60;
        /// </summary>
        /// <value>Selector (https://github.com/antonmedv/expr) that is evaluated against the event to get the value of the parameter. E.g. &#x60;payload.message&#x60;</value>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public string VarEvent { get; set; }

        /// <summary>
        /// Expression, if defined, is evaluated to specify the value for the parameter
        /// </summary>
        /// <value>Expression, if defined, is evaluated to specify the value for the parameter</value>
        [DataMember(Name = "expression", EmitDefaultValue = false)]
        public string Expression { get; set; }

        /// <summary>
        /// JQFilter expression against the resource object in resource templates
        /// </summary>
        /// <value>JQFilter expression against the resource object in resource templates</value>
        [DataMember(Name = "jqFilter", EmitDefaultValue = false)]
        public string JqFilter { get; set; }

        /// <summary>
        /// JSONPath of a resource to retrieve an output parameter value from in resource templates
        /// </summary>
        /// <value>JSONPath of a resource to retrieve an output parameter value from in resource templates</value>
        [DataMember(Name = "jsonPath", EmitDefaultValue = false)]
        public string JsonPath { get; set; }

        /// <summary>
        /// Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. &#39;{{steps.mystep.outputs.myparam}}&#39;)
        /// </summary>
        /// <value>Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. &#39;{{steps.mystep.outputs.myparam}}&#39;)</value>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public string VarParameter { get; set; }

        /// <summary>
        /// Path in the container to retrieve an output parameter value from in container templates
        /// </summary>
        /// <value>Path in the container to retrieve an output parameter value from in container templates</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.
        /// </summary>
        /// <value>SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.</value>
        [DataMember(Name = "supplied", EmitDefaultValue = false)]
        public Object Supplied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1ValueFrom {\n");
            sb.Append("  ConfigMapKeyRef: ").Append(ConfigMapKeyRef).Append("\n");
            sb.Append("  VarDefault: ").Append(VarDefault).Append("\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  JqFilter: ").Append(JqFilter).Append("\n");
            sb.Append("  JsonPath: ").Append(JsonPath).Append("\n");
            sb.Append("  VarParameter: ").Append(VarParameter).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Supplied: ").Append(Supplied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
