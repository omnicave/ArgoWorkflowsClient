/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.PodSecurityContext")]
    public partial class IoK8sApiCoreV1PodSecurityContext : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1PodSecurityContext" /> class.
        /// </summary>
        /// <param name="fsGroup">A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw- -- -  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows..</param>
        /// <param name="fsGroupChangePolicy">fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \&quot;OnRootMismatch\&quot; and \&quot;Always\&quot;. If not specified, \&quot;Always\&quot; is used. Note that this field cannot be set when spec.os.name is windows..</param>
        /// <param name="runAsGroup">The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows..</param>
        /// <param name="runAsNonRoot">Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence..</param>
        /// <param name="runAsUser">The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows..</param>
        /// <param name="seLinuxOptions">seLinuxOptions.</param>
        /// <param name="seccompProfile">seccompProfile.</param>
        /// <param name="supplementalGroups">A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows..</param>
        /// <param name="sysctls">Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows..</param>
        /// <param name="windowsOptions">windowsOptions.</param>
        public IoK8sApiCoreV1PodSecurityContext(int fsGroup = default(int), string fsGroupChangePolicy = default(string), int runAsGroup = default(int), bool runAsNonRoot = default(bool), int runAsUser = default(int), IoK8sApiCoreV1SELinuxOptions seLinuxOptions = default(IoK8sApiCoreV1SELinuxOptions), IoK8sApiCoreV1SeccompProfile seccompProfile = default(IoK8sApiCoreV1SeccompProfile), List<long> supplementalGroups = default(List<long>), List<IoK8sApiCoreV1Sysctl> sysctls = default(List<IoK8sApiCoreV1Sysctl>), IoK8sApiCoreV1WindowsSecurityContextOptions windowsOptions = default(IoK8sApiCoreV1WindowsSecurityContextOptions))
        {
            this.FsGroup = fsGroup;
            this.FsGroupChangePolicy = fsGroupChangePolicy;
            this.RunAsGroup = runAsGroup;
            this.RunAsNonRoot = runAsNonRoot;
            this.RunAsUser = runAsUser;
            this.SeLinuxOptions = seLinuxOptions;
            this.SeccompProfile = seccompProfile;
            this.SupplementalGroups = supplementalGroups;
            this.Sysctls = sysctls;
            this.WindowsOptions = windowsOptions;
        }

        /// <summary>
        /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw- -- -  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
        /// </summary>
        /// <value>A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw- -- -  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.</value>
        [DataMember(Name = "fsGroup", EmitDefaultValue = false)]
        public int FsGroup { get; set; }

        /// <summary>
        /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \&quot;OnRootMismatch\&quot; and \&quot;Always\&quot;. If not specified, \&quot;Always\&quot; is used. Note that this field cannot be set when spec.os.name is windows.
        /// </summary>
        /// <value>fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \&quot;OnRootMismatch\&quot; and \&quot;Always\&quot;. If not specified, \&quot;Always\&quot; is used. Note that this field cannot be set when spec.os.name is windows.</value>
        [DataMember(Name = "fsGroupChangePolicy", EmitDefaultValue = false)]
        public string FsGroupChangePolicy { get; set; }

        /// <summary>
        /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        /// </summary>
        /// <value>The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.</value>
        [DataMember(Name = "runAsGroup", EmitDefaultValue = false)]
        public int RunAsGroup { get; set; }

        /// <summary>
        /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        /// </summary>
        /// <value>Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</value>
        [DataMember(Name = "runAsNonRoot", EmitDefaultValue = true)]
        public bool RunAsNonRoot { get; set; }

        /// <summary>
        /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        /// </summary>
        /// <value>The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.</value>
        [DataMember(Name = "runAsUser", EmitDefaultValue = false)]
        public int RunAsUser { get; set; }

        /// <summary>
        /// Gets or Sets SeLinuxOptions
        /// </summary>
        [DataMember(Name = "seLinuxOptions", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SELinuxOptions SeLinuxOptions { get; set; }

        /// <summary>
        /// Gets or Sets SeccompProfile
        /// </summary>
        [DataMember(Name = "seccompProfile", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SeccompProfile SeccompProfile { get; set; }

        /// <summary>
        /// A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
        /// </summary>
        /// <value>A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.</value>
        [DataMember(Name = "supplementalGroups", EmitDefaultValue = false)]
        public List<long> SupplementalGroups { get; set; }

        /// <summary>
        /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
        /// </summary>
        /// <value>Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.</value>
        [DataMember(Name = "sysctls", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1Sysctl> Sysctls { get; set; }

        /// <summary>
        /// Gets or Sets WindowsOptions
        /// </summary>
        [DataMember(Name = "windowsOptions", EmitDefaultValue = false)]
        public IoK8sApiCoreV1WindowsSecurityContextOptions WindowsOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1PodSecurityContext {\n");
            sb.Append("  FsGroup: ").Append(FsGroup).Append("\n");
            sb.Append("  FsGroupChangePolicy: ").Append(FsGroupChangePolicy).Append("\n");
            sb.Append("  RunAsGroup: ").Append(RunAsGroup).Append("\n");
            sb.Append("  RunAsNonRoot: ").Append(RunAsNonRoot).Append("\n");
            sb.Append("  RunAsUser: ").Append(RunAsUser).Append("\n");
            sb.Append("  SeLinuxOptions: ").Append(SeLinuxOptions).Append("\n");
            sb.Append("  SeccompProfile: ").Append(SeccompProfile).Append("\n");
            sb.Append("  SupplementalGroups: ").Append(SupplementalGroups).Append("\n");
            sb.Append("  Sysctls: ").Append(Sysctls).Append("\n");
            sb.Append("  WindowsOptions: ").Append(WindowsOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
