/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// CronWorkflowStatus is the status of a CronWorkflow
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.CronWorkflowStatus")]
    public partial class IoArgoprojWorkflowV1alpha1CronWorkflowStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1CronWorkflowStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoArgoprojWorkflowV1alpha1CronWorkflowStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1CronWorkflowStatus" /> class.
        /// </summary>
        /// <param name="active">Active is a list of active workflows stemming from this CronWorkflow (required).</param>
        /// <param name="conditions">Conditions is a list of conditions the CronWorkflow may have (required).</param>
        /// <param name="lastScheduledTime">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers. (required).</param>
        public IoArgoprojWorkflowV1alpha1CronWorkflowStatus(List<IoK8sApiCoreV1ObjectReference> active = default(List<IoK8sApiCoreV1ObjectReference>), List<IoArgoprojWorkflowV1alpha1Condition> conditions = default(List<IoArgoprojWorkflowV1alpha1Condition>), DateTime lastScheduledTime = default(DateTime))
        {
            // to ensure "active" is required (not null)
            if (active == null)
            {
                throw new ArgumentNullException("active is a required property for IoArgoprojWorkflowV1alpha1CronWorkflowStatus and cannot be null");
            }
            this.Active = active;
            // to ensure "conditions" is required (not null)
            if (conditions == null)
            {
                throw new ArgumentNullException("conditions is a required property for IoArgoprojWorkflowV1alpha1CronWorkflowStatus and cannot be null");
            }
            this.Conditions = conditions;
            this.LastScheduledTime = lastScheduledTime;
        }

        /// <summary>
        /// Active is a list of active workflows stemming from this CronWorkflow
        /// </summary>
        /// <value>Active is a list of active workflows stemming from this CronWorkflow</value>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public List<IoK8sApiCoreV1ObjectReference> Active { get; set; }

        /// <summary>
        /// Conditions is a list of conditions the CronWorkflow may have
        /// </summary>
        /// <value>Conditions is a list of conditions the CronWorkflow may have</value>
        [DataMember(Name = "conditions", IsRequired = true, EmitDefaultValue = true)]
        public List<IoArgoprojWorkflowV1alpha1Condition> Conditions { get; set; }

        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name = "lastScheduledTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastScheduledTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1CronWorkflowStatus {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  LastScheduledTime: ").Append(LastScheduledTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
