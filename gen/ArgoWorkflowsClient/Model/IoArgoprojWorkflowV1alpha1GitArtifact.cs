/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// GitArtifact is the location of an git artifact
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.GitArtifact")]
    public partial class IoArgoprojWorkflowV1alpha1GitArtifact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1GitArtifact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoArgoprojWorkflowV1alpha1GitArtifact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1GitArtifact" /> class.
        /// </summary>
        /// <param name="branch">Branch is the branch to fetch when &#x60;SingleBranch&#x60; is enabled.</param>
        /// <param name="depth">Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip.</param>
        /// <param name="disableSubmodules">DisableSubmodules disables submodules during git clone.</param>
        /// <param name="fetch">Fetch specifies a number of refs that should be fetched before checkout.</param>
        /// <param name="insecureIgnoreHostKey">InsecureIgnoreHostKey disables SSH strict host key checking during git clone.</param>
        /// <param name="passwordSecret">passwordSecret.</param>
        /// <param name="repo">Repo is the git repository (required).</param>
        /// <param name="revision">Revision is the git commit, tag, branch to checkout.</param>
        /// <param name="singleBranch">SingleBranch enables single branch clone, using the &#x60;branch&#x60; parameter.</param>
        /// <param name="sshPrivateKeySecret">sshPrivateKeySecret.</param>
        /// <param name="usernameSecret">usernameSecret.</param>
        public IoArgoprojWorkflowV1alpha1GitArtifact(string branch = default(string), int depth = default(int), bool disableSubmodules = default(bool), List<string> fetch = default(List<string>), bool insecureIgnoreHostKey = default(bool), IoK8sApiCoreV1SecretKeySelector passwordSecret = default(IoK8sApiCoreV1SecretKeySelector), string repo = default(string), string revision = default(string), bool singleBranch = default(bool), IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret = default(IoK8sApiCoreV1SecretKeySelector), IoK8sApiCoreV1SecretKeySelector usernameSecret = default(IoK8sApiCoreV1SecretKeySelector))
        {
            // to ensure "repo" is required (not null)
            if (repo == null)
            {
                throw new ArgumentNullException("repo is a required property for IoArgoprojWorkflowV1alpha1GitArtifact and cannot be null");
            }
            this.Repo = repo;
            this.Branch = branch;
            this.Depth = depth;
            this.DisableSubmodules = disableSubmodules;
            this.Fetch = fetch;
            this.InsecureIgnoreHostKey = insecureIgnoreHostKey;
            this.PasswordSecret = passwordSecret;
            this.Revision = revision;
            this.SingleBranch = singleBranch;
            this.SshPrivateKeySecret = sshPrivateKeySecret;
            this.UsernameSecret = usernameSecret;
        }

        /// <summary>
        /// Branch is the branch to fetch when &#x60;SingleBranch&#x60; is enabled
        /// </summary>
        /// <value>Branch is the branch to fetch when &#x60;SingleBranch&#x60; is enabled</value>
        [DataMember(Name = "branch", EmitDefaultValue = false)]
        public string Branch { get; set; }

        /// <summary>
        /// Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
        /// </summary>
        /// <value>Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip</value>
        [DataMember(Name = "depth", EmitDefaultValue = false)]
        public int Depth { get; set; }

        /// <summary>
        /// DisableSubmodules disables submodules during git clone
        /// </summary>
        /// <value>DisableSubmodules disables submodules during git clone</value>
        [DataMember(Name = "disableSubmodules", EmitDefaultValue = true)]
        public bool DisableSubmodules { get; set; }

        /// <summary>
        /// Fetch specifies a number of refs that should be fetched before checkout
        /// </summary>
        /// <value>Fetch specifies a number of refs that should be fetched before checkout</value>
        [DataMember(Name = "fetch", EmitDefaultValue = false)]
        public List<string> Fetch { get; set; }

        /// <summary>
        /// InsecureIgnoreHostKey disables SSH strict host key checking during git clone
        /// </summary>
        /// <value>InsecureIgnoreHostKey disables SSH strict host key checking during git clone</value>
        [DataMember(Name = "insecureIgnoreHostKey", EmitDefaultValue = true)]
        public bool InsecureIgnoreHostKey { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSecret
        /// </summary>
        [DataMember(Name = "passwordSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector PasswordSecret { get; set; }

        /// <summary>
        /// Repo is the git repository
        /// </summary>
        /// <value>Repo is the git repository</value>
        [DataMember(Name = "repo", IsRequired = true, EmitDefaultValue = true)]
        public string Repo { get; set; }

        /// <summary>
        /// Revision is the git commit, tag, branch to checkout
        /// </summary>
        /// <value>Revision is the git commit, tag, branch to checkout</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public string Revision { get; set; }

        /// <summary>
        /// SingleBranch enables single branch clone, using the &#x60;branch&#x60; parameter
        /// </summary>
        /// <value>SingleBranch enables single branch clone, using the &#x60;branch&#x60; parameter</value>
        [DataMember(Name = "singleBranch", EmitDefaultValue = true)]
        public bool SingleBranch { get; set; }

        /// <summary>
        /// Gets or Sets SshPrivateKeySecret
        /// </summary>
        [DataMember(Name = "sshPrivateKeySecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector SshPrivateKeySecret { get; set; }

        /// <summary>
        /// Gets or Sets UsernameSecret
        /// </summary>
        [DataMember(Name = "usernameSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector UsernameSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1GitArtifact {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  DisableSubmodules: ").Append(DisableSubmodules).Append("\n");
            sb.Append("  Fetch: ").Append(Fetch).Append("\n");
            sb.Append("  InsecureIgnoreHostKey: ").Append(InsecureIgnoreHostKey).Append("\n");
            sb.Append("  PasswordSecret: ").Append(PasswordSecret).Append("\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  SingleBranch: ").Append(SingleBranch).Append("\n");
            sb.Append("  SshPrivateKeySecret: ").Append(SshPrivateKeySecret).Append("\n");
            sb.Append("  UsernameSecret: ").Append(UsernameSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
