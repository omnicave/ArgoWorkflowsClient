/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// AzureArtifact is the location of a an Azure Storage artifact
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.AzureArtifact")]
    public partial class IoArgoprojWorkflowV1alpha1AzureArtifact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1AzureArtifact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoArgoprojWorkflowV1alpha1AzureArtifact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1AzureArtifact" /> class.
        /// </summary>
        /// <param name="accountKeySecret">accountKeySecret.</param>
        /// <param name="blob">Blob is the blob name (i.e., path) in the container where the artifact resides (required).</param>
        /// <param name="container">Container is the container where resources will be stored (required).</param>
        /// <param name="endpoint">Endpoint is the service url associated with an account. It is most likely \&quot;https://&lt;ACCOUNT_NAME&gt;.blob.core.windows.net\&quot; (required).</param>
        /// <param name="useSDKCreds">UseSDKCreds tells the driver to figure out credentials based on sdk defaults..</param>
        public IoArgoprojWorkflowV1alpha1AzureArtifact(IoK8sApiCoreV1SecretKeySelector accountKeySecret = default(IoK8sApiCoreV1SecretKeySelector), string blob = default(string), string container = default(string), string endpoint = default(string), bool useSDKCreds = default(bool))
        {
            // to ensure "blob" is required (not null)
            if (blob == null)
            {
                throw new ArgumentNullException("blob is a required property for IoArgoprojWorkflowV1alpha1AzureArtifact and cannot be null");
            }
            this.Blob = blob;
            // to ensure "container" is required (not null)
            if (container == null)
            {
                throw new ArgumentNullException("container is a required property for IoArgoprojWorkflowV1alpha1AzureArtifact and cannot be null");
            }
            this.Container = container;
            // to ensure "endpoint" is required (not null)
            if (endpoint == null)
            {
                throw new ArgumentNullException("endpoint is a required property for IoArgoprojWorkflowV1alpha1AzureArtifact and cannot be null");
            }
            this.Endpoint = endpoint;
            this.AccountKeySecret = accountKeySecret;
            this.UseSDKCreds = useSDKCreds;
        }

        /// <summary>
        /// Gets or Sets AccountKeySecret
        /// </summary>
        [DataMember(Name = "accountKeySecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector AccountKeySecret { get; set; }

        /// <summary>
        /// Blob is the blob name (i.e., path) in the container where the artifact resides
        /// </summary>
        /// <value>Blob is the blob name (i.e., path) in the container where the artifact resides</value>
        [DataMember(Name = "blob", IsRequired = true, EmitDefaultValue = true)]
        public string Blob { get; set; }

        /// <summary>
        /// Container is the container where resources will be stored
        /// </summary>
        /// <value>Container is the container where resources will be stored</value>
        [DataMember(Name = "container", IsRequired = true, EmitDefaultValue = true)]
        public string Container { get; set; }

        /// <summary>
        /// Endpoint is the service url associated with an account. It is most likely \&quot;https://&lt;ACCOUNT_NAME&gt;.blob.core.windows.net\&quot;
        /// </summary>
        /// <value>Endpoint is the service url associated with an account. It is most likely \&quot;https://&lt;ACCOUNT_NAME&gt;.blob.core.windows.net\&quot;</value>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        public string Endpoint { get; set; }

        /// <summary>
        /// UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
        /// </summary>
        /// <value>UseSDKCreds tells the driver to figure out credentials based on sdk defaults.</value>
        [DataMember(Name = "useSDKCreds", EmitDefaultValue = true)]
        public bool UseSDKCreds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1AzureArtifact {\n");
            sb.Append("  AccountKeySecret: ").Append(AccountKeySecret).Append("\n");
            sb.Append("  Blob: ").Append(Blob).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  UseSDKCreds: ").Append(UseSDKCreds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
