/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// Prometheus is a prometheus metric to be emitted
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.Prometheus")]
    public partial class IoArgoprojWorkflowV1alpha1Prometheus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1Prometheus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoArgoprojWorkflowV1alpha1Prometheus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1Prometheus" /> class.
        /// </summary>
        /// <param name="counter">counter.</param>
        /// <param name="gauge">gauge.</param>
        /// <param name="help">Help is a string that describes the metric (required).</param>
        /// <param name="histogram">histogram.</param>
        /// <param name="labels">Labels is a list of metric labels.</param>
        /// <param name="name">Name is the name of the metric (required).</param>
        /// <param name="when">When is a conditional statement that decides when to emit the metric.</param>
        public IoArgoprojWorkflowV1alpha1Prometheus(IoArgoprojWorkflowV1alpha1Counter counter = default(IoArgoprojWorkflowV1alpha1Counter), IoArgoprojWorkflowV1alpha1Gauge gauge = default(IoArgoprojWorkflowV1alpha1Gauge), string help = default(string), IoArgoprojWorkflowV1alpha1Histogram histogram = default(IoArgoprojWorkflowV1alpha1Histogram), List<IoArgoprojWorkflowV1alpha1MetricLabel> labels = default(List<IoArgoprojWorkflowV1alpha1MetricLabel>), string name = default(string), string when = default(string))
        {
            // to ensure "help" is required (not null)
            if (help == null)
            {
                throw new ArgumentNullException("help is a required property for IoArgoprojWorkflowV1alpha1Prometheus and cannot be null");
            }
            this.Help = help;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IoArgoprojWorkflowV1alpha1Prometheus and cannot be null");
            }
            this.Name = name;
            this.Counter = counter;
            this.Gauge = gauge;
            this.Histogram = histogram;
            this.Labels = labels;
            this.When = when;
        }

        /// <summary>
        /// Gets or Sets Counter
        /// </summary>
        [DataMember(Name = "counter", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Counter Counter { get; set; }

        /// <summary>
        /// Gets or Sets Gauge
        /// </summary>
        [DataMember(Name = "gauge", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Gauge Gauge { get; set; }

        /// <summary>
        /// Help is a string that describes the metric
        /// </summary>
        /// <value>Help is a string that describes the metric</value>
        [DataMember(Name = "help", IsRequired = true, EmitDefaultValue = true)]
        public string Help { get; set; }

        /// <summary>
        /// Gets or Sets Histogram
        /// </summary>
        [DataMember(Name = "histogram", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Histogram Histogram { get; set; }

        /// <summary>
        /// Labels is a list of metric labels
        /// </summary>
        /// <value>Labels is a list of metric labels</value>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<IoArgoprojWorkflowV1alpha1MetricLabel> Labels { get; set; }

        /// <summary>
        /// Name is the name of the metric
        /// </summary>
        /// <value>Name is the name of the metric</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// When is a conditional statement that decides when to emit the metric
        /// </summary>
        /// <value>When is a conditional statement that decides when to emit the metric</value>
        [DataMember(Name = "when", EmitDefaultValue = false)]
        public string When { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1Prometheus {\n");
            sb.Append("  Counter: ").Append(Counter).Append("\n");
            sb.Append("  Gauge: ").Append(Gauge).Append("\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  Histogram: ").Append(Histogram).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
