/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// IoArgoprojEventsV1alpha1WebhookContext
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.WebhookContext")]
    public partial class IoArgoprojEventsV1alpha1WebhookContext : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1WebhookContext" /> class.
        /// </summary>
        /// <param name="authSecret">authSecret.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="maxPayloadSize">maxPayloadSize.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="method">method.</param>
        /// <param name="port">Port on which HTTP server is listening for incoming events..</param>
        /// <param name="serverCertSecret">serverCertSecret.</param>
        /// <param name="serverKeySecret">serverKeySecret.</param>
        /// <param name="url">URL is the url of the server..</param>
        public IoArgoprojEventsV1alpha1WebhookContext(IoK8sApiCoreV1SecretKeySelector authSecret = default(IoK8sApiCoreV1SecretKeySelector), string endpoint = default(string), string maxPayloadSize = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string method = default(string), string port = default(string), IoK8sApiCoreV1SecretKeySelector serverCertSecret = default(IoK8sApiCoreV1SecretKeySelector), IoK8sApiCoreV1SecretKeySelector serverKeySecret = default(IoK8sApiCoreV1SecretKeySelector), string url = default(string))
        {
            this.AuthSecret = authSecret;
            this.Endpoint = endpoint;
            this.MaxPayloadSize = maxPayloadSize;
            this.Metadata = metadata;
            this.Method = method;
            this.Port = port;
            this.ServerCertSecret = serverCertSecret;
            this.ServerKeySecret = serverKeySecret;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets AuthSecret
        /// </summary>
        [DataMember(Name = "authSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector AuthSecret { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets MaxPayloadSize
        /// </summary>
        [DataMember(Name = "maxPayloadSize", EmitDefaultValue = false)]
        public string MaxPayloadSize { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Port on which HTTP server is listening for incoming events.
        /// </summary>
        /// <value>Port on which HTTP server is listening for incoming events.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets ServerCertSecret
        /// </summary>
        [DataMember(Name = "serverCertSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector ServerCertSecret { get; set; }

        /// <summary>
        /// Gets or Sets ServerKeySecret
        /// </summary>
        [DataMember(Name = "serverKeySecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector ServerKeySecret { get; set; }

        /// <summary>
        /// URL is the url of the server.
        /// </summary>
        /// <value>URL is the url of the server.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1WebhookContext {\n");
            sb.Append("  AuthSecret: ").Append(AuthSecret).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  MaxPayloadSize: ").Append(MaxPayloadSize).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ServerCertSecret: ").Append(ServerCertSecret).Append("\n");
            sb.Append("  ServerKeySecret: ").Append(ServerKeySecret).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
