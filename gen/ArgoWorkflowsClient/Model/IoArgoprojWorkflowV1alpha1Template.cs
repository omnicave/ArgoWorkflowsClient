/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// Template is a reusable and composable unit of execution in a workflow
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.Template")]
    public partial class IoArgoprojWorkflowV1alpha1Template : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1Template" /> class.
        /// </summary>
        /// <param name="activeDeadlineSeconds">activeDeadlineSeconds.</param>
        /// <param name="affinity">affinity.</param>
        /// <param name="archiveLocation">archiveLocation.</param>
        /// <param name="automountServiceAccountToken">AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false..</param>
        /// <param name="container">container.</param>
        /// <param name="containerSet">containerSet.</param>
        /// <param name="daemon">Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness.</param>
        /// <param name="dag">dag.</param>
        /// <param name="data">data.</param>
        /// <param name="executor">executor.</param>
        /// <param name="failFast">FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with &#x60;withItems&#x60;, etc..</param>
        /// <param name="hostAliases">HostAliases is an optional list of hosts and IPs that will be injected into the pod spec.</param>
        /// <param name="http">http.</param>
        /// <param name="initContainers">InitContainers is a list of containers which run before the main container..</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="memoize">memoize.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="name">Name is the name of the template.</param>
        /// <param name="nodeSelector">NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level..</param>
        /// <param name="outputs">outputs.</param>
        /// <param name="parallelism">Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total..</param>
        /// <param name="plugin">Plugin is an Object with exactly one key.</param>
        /// <param name="podSpecPatch">PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits)..</param>
        /// <param name="priority">Priority to apply to workflow pods..</param>
        /// <param name="priorityClassName">PriorityClassName to apply to workflow pods..</param>
        /// <param name="resource">resource.</param>
        /// <param name="retryStrategy">retryStrategy.</param>
        /// <param name="schedulerName">If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler..</param>
        /// <param name="script">script.</param>
        /// <param name="securityContext">securityContext.</param>
        /// <param name="serviceAccountName">ServiceAccountName to apply to workflow pods.</param>
        /// <param name="sidecars">Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes.</param>
        /// <param name="steps">Steps define a series of sequential/parallel workflow steps.</param>
        /// <param name="suspend">suspend.</param>
        /// <param name="synchronization">synchronization.</param>
        /// <param name="timeout">Timeout allows to set the total node execution timeout duration counting from the node&#39;s start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates..</param>
        /// <param name="tolerations">Tolerations to apply to workflow pods..</param>
        /// <param name="volumes">Volumes is a list of volumes that can be mounted by containers in a template..</param>
        public IoArgoprojWorkflowV1alpha1Template(string activeDeadlineSeconds = default(string), IoK8sApiCoreV1Affinity affinity = default(IoK8sApiCoreV1Affinity), IoArgoprojWorkflowV1alpha1ArtifactLocation archiveLocation = default(IoArgoprojWorkflowV1alpha1ArtifactLocation), bool automountServiceAccountToken = default(bool), IoK8sApiCoreV1Container container = default(IoK8sApiCoreV1Container), IoArgoprojWorkflowV1alpha1ContainerSetTemplate containerSet = default(IoArgoprojWorkflowV1alpha1ContainerSetTemplate), bool daemon = default(bool), IoArgoprojWorkflowV1alpha1DAGTemplate dag = default(IoArgoprojWorkflowV1alpha1DAGTemplate), IoArgoprojWorkflowV1alpha1Data data = default(IoArgoprojWorkflowV1alpha1Data), IoArgoprojWorkflowV1alpha1ExecutorConfig executor = default(IoArgoprojWorkflowV1alpha1ExecutorConfig), bool failFast = default(bool), List<IoK8sApiCoreV1HostAlias> hostAliases = default(List<IoK8sApiCoreV1HostAlias>), IoArgoprojWorkflowV1alpha1HTTP http = default(IoArgoprojWorkflowV1alpha1HTTP), List<IoArgoprojWorkflowV1alpha1UserContainer> initContainers = default(List<IoArgoprojWorkflowV1alpha1UserContainer>), IoArgoprojWorkflowV1alpha1Inputs inputs = default(IoArgoprojWorkflowV1alpha1Inputs), IoArgoprojWorkflowV1alpha1Memoize memoize = default(IoArgoprojWorkflowV1alpha1Memoize), IoArgoprojWorkflowV1alpha1Metadata metadata = default(IoArgoprojWorkflowV1alpha1Metadata), IoArgoprojWorkflowV1alpha1Metrics metrics = default(IoArgoprojWorkflowV1alpha1Metrics), string name = default(string), Dictionary<string, string> nodeSelector = default(Dictionary<string, string>), IoArgoprojWorkflowV1alpha1Outputs outputs = default(IoArgoprojWorkflowV1alpha1Outputs), int parallelism = default(int), Object plugin = default(Object), string podSpecPatch = default(string), int priority = default(int), string priorityClassName = default(string), IoArgoprojWorkflowV1alpha1ResourceTemplate resource = default(IoArgoprojWorkflowV1alpha1ResourceTemplate), IoArgoprojWorkflowV1alpha1RetryStrategy retryStrategy = default(IoArgoprojWorkflowV1alpha1RetryStrategy), string schedulerName = default(string), IoArgoprojWorkflowV1alpha1ScriptTemplate script = default(IoArgoprojWorkflowV1alpha1ScriptTemplate), IoK8sApiCoreV1PodSecurityContext securityContext = default(IoK8sApiCoreV1PodSecurityContext), string serviceAccountName = default(string), List<IoArgoprojWorkflowV1alpha1UserContainer> sidecars = default(List<IoArgoprojWorkflowV1alpha1UserContainer>), List<List<IoArgoprojWorkflowV1alpha1WorkflowStep>> steps = default(List<List<IoArgoprojWorkflowV1alpha1WorkflowStep>>), IoArgoprojWorkflowV1alpha1SuspendTemplate suspend = default(IoArgoprojWorkflowV1alpha1SuspendTemplate), IoArgoprojWorkflowV1alpha1Synchronization synchronization = default(IoArgoprojWorkflowV1alpha1Synchronization), string timeout = default(string), List<IoK8sApiCoreV1Toleration> tolerations = default(List<IoK8sApiCoreV1Toleration>), List<IoK8sApiCoreV1Volume> volumes = default(List<IoK8sApiCoreV1Volume>))
        {
            this.ActiveDeadlineSeconds = activeDeadlineSeconds;
            this.Affinity = affinity;
            this.ArchiveLocation = archiveLocation;
            this.AutomountServiceAccountToken = automountServiceAccountToken;
            this.Container = container;
            this.ContainerSet = containerSet;
            this.Daemon = daemon;
            this.Dag = dag;
            this.Data = data;
            this.Executor = executor;
            this.FailFast = failFast;
            this.HostAliases = hostAliases;
            this.Http = http;
            this.InitContainers = initContainers;
            this.Inputs = inputs;
            this.Memoize = memoize;
            this.Metadata = metadata;
            this.Metrics = metrics;
            this.Name = name;
            this.NodeSelector = nodeSelector;
            this.Outputs = outputs;
            this.Parallelism = parallelism;
            this.Plugin = plugin;
            this.PodSpecPatch = podSpecPatch;
            this.Priority = priority;
            this.PriorityClassName = priorityClassName;
            this.Resource = resource;
            this.RetryStrategy = retryStrategy;
            this.SchedulerName = schedulerName;
            this.Script = script;
            this.SecurityContext = securityContext;
            this.ServiceAccountName = serviceAccountName;
            this.Sidecars = sidecars;
            this.Steps = steps;
            this.Suspend = suspend;
            this.Synchronization = synchronization;
            this.Timeout = timeout;
            this.Tolerations = tolerations;
            this.Volumes = volumes;
        }

        /// <summary>
        /// Gets or Sets ActiveDeadlineSeconds
        /// </summary>
        [DataMember(Name = "activeDeadlineSeconds", EmitDefaultValue = false)]
        public string ActiveDeadlineSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Affinity
        /// </summary>
        [DataMember(Name = "affinity", EmitDefaultValue = false)]
        public IoK8sApiCoreV1Affinity Affinity { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveLocation
        /// </summary>
        [DataMember(Name = "archiveLocation", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ArtifactLocation ArchiveLocation { get; set; }

        /// <summary>
        /// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.
        /// </summary>
        /// <value>AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.</value>
        [DataMember(Name = "automountServiceAccountToken", EmitDefaultValue = true)]
        public bool AutomountServiceAccountToken { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name = "container", EmitDefaultValue = false)]
        public IoK8sApiCoreV1Container Container { get; set; }

        /// <summary>
        /// Gets or Sets ContainerSet
        /// </summary>
        [DataMember(Name = "containerSet", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ContainerSetTemplate ContainerSet { get; set; }

        /// <summary>
        /// Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness
        /// </summary>
        /// <value>Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness</value>
        [DataMember(Name = "daemon", EmitDefaultValue = true)]
        public bool Daemon { get; set; }

        /// <summary>
        /// Gets or Sets Dag
        /// </summary>
        [DataMember(Name = "dag", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1DAGTemplate Dag { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Data Data { get; set; }

        /// <summary>
        /// Gets or Sets Executor
        /// </summary>
        [DataMember(Name = "executor", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ExecutorConfig Executor { get; set; }

        /// <summary>
        /// FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with &#x60;withItems&#x60;, etc.
        /// </summary>
        /// <value>FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with &#x60;withItems&#x60;, etc.</value>
        [DataMember(Name = "failFast", EmitDefaultValue = true)]
        public bool FailFast { get; set; }

        /// <summary>
        /// HostAliases is an optional list of hosts and IPs that will be injected into the pod spec
        /// </summary>
        /// <value>HostAliases is an optional list of hosts and IPs that will be injected into the pod spec</value>
        [DataMember(Name = "hostAliases", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1HostAlias> HostAliases { get; set; }

        /// <summary>
        /// Gets or Sets Http
        /// </summary>
        [DataMember(Name = "http", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1HTTP Http { get; set; }

        /// <summary>
        /// InitContainers is a list of containers which run before the main container.
        /// </summary>
        /// <value>InitContainers is a list of containers which run before the main container.</value>
        [DataMember(Name = "initContainers", EmitDefaultValue = false)]
        public List<IoArgoprojWorkflowV1alpha1UserContainer> InitContainers { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Inputs Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Memoize
        /// </summary>
        [DataMember(Name = "memoize", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Memoize Memoize { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Metadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Metrics Metrics { get; set; }

        /// <summary>
        /// Name is the name of the template
        /// </summary>
        /// <value>Name is the name of the template</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.
        /// </summary>
        /// <value>NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.</value>
        [DataMember(Name = "nodeSelector", EmitDefaultValue = false)]
        public Dictionary<string, string> NodeSelector { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name = "outputs", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Outputs Outputs { get; set; }

        /// <summary>
        /// Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.
        /// </summary>
        /// <value>Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.</value>
        [DataMember(Name = "parallelism", EmitDefaultValue = false)]
        public int Parallelism { get; set; }

        /// <summary>
        /// Plugin is an Object with exactly one key
        /// </summary>
        /// <value>Plugin is an Object with exactly one key</value>
        [DataMember(Name = "plugin", EmitDefaultValue = false)]
        public Object Plugin { get; set; }

        /// <summary>
        /// PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).
        /// </summary>
        /// <value>PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).</value>
        [DataMember(Name = "podSpecPatch", EmitDefaultValue = false)]
        public string PodSpecPatch { get; set; }

        /// <summary>
        /// Priority to apply to workflow pods.
        /// </summary>
        /// <value>Priority to apply to workflow pods.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// PriorityClassName to apply to workflow pods.
        /// </summary>
        /// <value>PriorityClassName to apply to workflow pods.</value>
        [DataMember(Name = "priorityClassName", EmitDefaultValue = false)]
        public string PriorityClassName { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name = "resource", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ResourceTemplate Resource { get; set; }

        /// <summary>
        /// Gets or Sets RetryStrategy
        /// </summary>
        [DataMember(Name = "retryStrategy", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1RetryStrategy RetryStrategy { get; set; }

        /// <summary>
        /// If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.
        /// </summary>
        /// <value>If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.</value>
        [DataMember(Name = "schedulerName", EmitDefaultValue = false)]
        public string SchedulerName { get; set; }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ScriptTemplate Script { get; set; }

        /// <summary>
        /// Gets or Sets SecurityContext
        /// </summary>
        [DataMember(Name = "securityContext", EmitDefaultValue = false)]
        public IoK8sApiCoreV1PodSecurityContext SecurityContext { get; set; }

        /// <summary>
        /// ServiceAccountName to apply to workflow pods
        /// </summary>
        /// <value>ServiceAccountName to apply to workflow pods</value>
        [DataMember(Name = "serviceAccountName", EmitDefaultValue = false)]
        public string ServiceAccountName { get; set; }

        /// <summary>
        /// Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes
        /// </summary>
        /// <value>Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes</value>
        [DataMember(Name = "sidecars", EmitDefaultValue = false)]
        public List<IoArgoprojWorkflowV1alpha1UserContainer> Sidecars { get; set; }

        /// <summary>
        /// Steps define a series of sequential/parallel workflow steps
        /// </summary>
        /// <value>Steps define a series of sequential/parallel workflow steps</value>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public List<List<IoArgoprojWorkflowV1alpha1WorkflowStep>> Steps { get; set; }

        /// <summary>
        /// Gets or Sets Suspend
        /// </summary>
        [DataMember(Name = "suspend", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1SuspendTemplate Suspend { get; set; }

        /// <summary>
        /// Gets or Sets Synchronization
        /// </summary>
        [DataMember(Name = "synchronization", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Synchronization Synchronization { get; set; }

        /// <summary>
        /// Timeout allows to set the total node execution timeout duration counting from the node&#39;s start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.
        /// </summary>
        /// <value>Timeout allows to set the total node execution timeout duration counting from the node&#39;s start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Tolerations to apply to workflow pods.
        /// </summary>
        /// <value>Tolerations to apply to workflow pods.</value>
        [DataMember(Name = "tolerations", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1Toleration> Tolerations { get; set; }

        /// <summary>
        /// Volumes is a list of volumes that can be mounted by containers in a template.
        /// </summary>
        /// <value>Volumes is a list of volumes that can be mounted by containers in a template.</value>
        [DataMember(Name = "volumes", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1Volume> Volumes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1Template {\n");
            sb.Append("  ActiveDeadlineSeconds: ").Append(ActiveDeadlineSeconds).Append("\n");
            sb.Append("  Affinity: ").Append(Affinity).Append("\n");
            sb.Append("  ArchiveLocation: ").Append(ArchiveLocation).Append("\n");
            sb.Append("  AutomountServiceAccountToken: ").Append(AutomountServiceAccountToken).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  ContainerSet: ").Append(ContainerSet).Append("\n");
            sb.Append("  Daemon: ").Append(Daemon).Append("\n");
            sb.Append("  Dag: ").Append(Dag).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Executor: ").Append(Executor).Append("\n");
            sb.Append("  FailFast: ").Append(FailFast).Append("\n");
            sb.Append("  HostAliases: ").Append(HostAliases).Append("\n");
            sb.Append("  Http: ").Append(Http).Append("\n");
            sb.Append("  InitContainers: ").Append(InitContainers).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Memoize: ").Append(Memoize).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NodeSelector: ").Append(NodeSelector).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Parallelism: ").Append(Parallelism).Append("\n");
            sb.Append("  Plugin: ").Append(Plugin).Append("\n");
            sb.Append("  PodSpecPatch: ").Append(PodSpecPatch).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PriorityClassName: ").Append(PriorityClassName).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  RetryStrategy: ").Append(RetryStrategy).Append("\n");
            sb.Append("  SchedulerName: ").Append(SchedulerName).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  SecurityContext: ").Append(SecurityContext).Append("\n");
            sb.Append("  ServiceAccountName: ").Append(ServiceAccountName).Append("\n");
            sb.Append("  Sidecars: ").Append(Sidecars).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("  Synchronization: ").Append(Synchronization).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Tolerations: ").Append(Tolerations).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
