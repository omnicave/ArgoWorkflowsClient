/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.FlexVolumeSource")]
    public partial class IoK8sApiCoreV1FlexVolumeSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1FlexVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1FlexVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1FlexVolumeSource" /> class.
        /// </summary>
        /// <param name="driver">Driver is the name of the driver to use for this volume. (required).</param>
        /// <param name="fsType">Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script..</param>
        /// <param name="options">Optional: Extra command options if any..</param>
        /// <param name="varReadOnly">Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts..</param>
        /// <param name="secretRef">secretRef.</param>
        public IoK8sApiCoreV1FlexVolumeSource(string driver = default(string), string fsType = default(string), Dictionary<string, string> options = default(Dictionary<string, string>), bool varReadOnly = default(bool), IoK8sApiCoreV1LocalObjectReference secretRef = default(IoK8sApiCoreV1LocalObjectReference))
        {
            // to ensure "driver" is required (not null)
            if (driver == null)
            {
                throw new ArgumentNullException("driver is a required property for IoK8sApiCoreV1FlexVolumeSource and cannot be null");
            }
            this.Driver = driver;
            this.FsType = fsType;
            this.Options = options;
            this.VarReadOnly = varReadOnly;
            this.SecretRef = secretRef;
        }

        /// <summary>
        /// Driver is the name of the driver to use for this volume.
        /// </summary>
        /// <value>Driver is the name of the driver to use for this volume.</value>
        [DataMember(Name = "driver", IsRequired = true, EmitDefaultValue = true)]
        public string Driver { get; set; }

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script.
        /// </summary>
        /// <value>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script.</value>
        [DataMember(Name = "fsType", EmitDefaultValue = false)]
        public string FsType { get; set; }

        /// <summary>
        /// Optional: Extra command options if any.
        /// </summary>
        /// <value>Optional: Extra command options if any.</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public Dictionary<string, string> Options { get; set; }

        /// <summary>
        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        /// </summary>
        /// <value>Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets SecretRef
        /// </summary>
        [DataMember(Name = "secretRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1LocalObjectReference SecretRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1FlexVolumeSource {\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  SecretRef: ").Append(SecretRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
