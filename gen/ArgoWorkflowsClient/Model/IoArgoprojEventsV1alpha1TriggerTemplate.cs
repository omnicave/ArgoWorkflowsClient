/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// TriggerTemplate is the template that describes trigger specification.
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.TriggerTemplate")]
    public partial class IoArgoprojEventsV1alpha1TriggerTemplate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1TriggerTemplate" /> class.
        /// </summary>
        /// <param name="argoWorkflow">argoWorkflow.</param>
        /// <param name="awsLambda">awsLambda.</param>
        /// <param name="azureEventHubs">azureEventHubs.</param>
        /// <param name="conditions">conditions.</param>
        /// <param name="conditionsReset">conditionsReset.</param>
        /// <param name="custom">custom.</param>
        /// <param name="http">http.</param>
        /// <param name="k8s">k8s.</param>
        /// <param name="kafka">kafka.</param>
        /// <param name="log">log.</param>
        /// <param name="name">Name is a unique name of the action to take..</param>
        /// <param name="nats">nats.</param>
        /// <param name="openWhisk">openWhisk.</param>
        /// <param name="pulsar">pulsar.</param>
        /// <param name="slack">slack.</param>
        public IoArgoprojEventsV1alpha1TriggerTemplate(IoArgoprojEventsV1alpha1ArgoWorkflowTrigger argoWorkflow = default(IoArgoprojEventsV1alpha1ArgoWorkflowTrigger), IoArgoprojEventsV1alpha1AWSLambdaTrigger awsLambda = default(IoArgoprojEventsV1alpha1AWSLambdaTrigger), IoArgoprojEventsV1alpha1AzureEventHubsTrigger azureEventHubs = default(IoArgoprojEventsV1alpha1AzureEventHubsTrigger), string conditions = default(string), List<IoArgoprojEventsV1alpha1ConditionsResetCriteria> conditionsReset = default(List<IoArgoprojEventsV1alpha1ConditionsResetCriteria>), IoArgoprojEventsV1alpha1CustomTrigger custom = default(IoArgoprojEventsV1alpha1CustomTrigger), IoArgoprojEventsV1alpha1HTTPTrigger http = default(IoArgoprojEventsV1alpha1HTTPTrigger), IoArgoprojEventsV1alpha1StandardK8STrigger k8s = default(IoArgoprojEventsV1alpha1StandardK8STrigger), IoArgoprojEventsV1alpha1KafkaTrigger kafka = default(IoArgoprojEventsV1alpha1KafkaTrigger), IoArgoprojEventsV1alpha1LogTrigger log = default(IoArgoprojEventsV1alpha1LogTrigger), string name = default(string), IoArgoprojEventsV1alpha1NATSTrigger nats = default(IoArgoprojEventsV1alpha1NATSTrigger), IoArgoprojEventsV1alpha1OpenWhiskTrigger openWhisk = default(IoArgoprojEventsV1alpha1OpenWhiskTrigger), IoArgoprojEventsV1alpha1PulsarTrigger pulsar = default(IoArgoprojEventsV1alpha1PulsarTrigger), IoArgoprojEventsV1alpha1SlackTrigger slack = default(IoArgoprojEventsV1alpha1SlackTrigger))
        {
            this.ArgoWorkflow = argoWorkflow;
            this.AwsLambda = awsLambda;
            this.AzureEventHubs = azureEventHubs;
            this.Conditions = conditions;
            this.ConditionsReset = conditionsReset;
            this.Custom = custom;
            this.Http = http;
            this.K8s = k8s;
            this.Kafka = kafka;
            this.Log = log;
            this.Name = name;
            this.Nats = nats;
            this.OpenWhisk = openWhisk;
            this.Pulsar = pulsar;
            this.Slack = slack;
        }

        /// <summary>
        /// Gets or Sets ArgoWorkflow
        /// </summary>
        [DataMember(Name = "argoWorkflow", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1ArgoWorkflowTrigger ArgoWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets AwsLambda
        /// </summary>
        [DataMember(Name = "awsLambda", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1AWSLambdaTrigger AwsLambda { get; set; }

        /// <summary>
        /// Gets or Sets AzureEventHubs
        /// </summary>
        [DataMember(Name = "azureEventHubs", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1AzureEventHubsTrigger AzureEventHubs { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public string Conditions { get; set; }

        /// <summary>
        /// Gets or Sets ConditionsReset
        /// </summary>
        [DataMember(Name = "conditionsReset", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1ConditionsResetCriteria> ConditionsReset { get; set; }

        /// <summary>
        /// Gets or Sets Custom
        /// </summary>
        [DataMember(Name = "custom", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1CustomTrigger Custom { get; set; }

        /// <summary>
        /// Gets or Sets Http
        /// </summary>
        [DataMember(Name = "http", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1HTTPTrigger Http { get; set; }

        /// <summary>
        /// Gets or Sets K8s
        /// </summary>
        [DataMember(Name = "k8s", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1StandardK8STrigger K8s { get; set; }

        /// <summary>
        /// Gets or Sets Kafka
        /// </summary>
        [DataMember(Name = "kafka", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1KafkaTrigger Kafka { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [DataMember(Name = "log", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1LogTrigger Log { get; set; }

        /// <summary>
        /// Name is a unique name of the action to take.
        /// </summary>
        /// <value>Name is a unique name of the action to take.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Nats
        /// </summary>
        [DataMember(Name = "nats", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1NATSTrigger Nats { get; set; }

        /// <summary>
        /// Gets or Sets OpenWhisk
        /// </summary>
        [DataMember(Name = "openWhisk", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1OpenWhiskTrigger OpenWhisk { get; set; }

        /// <summary>
        /// Gets or Sets Pulsar
        /// </summary>
        [DataMember(Name = "pulsar", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1PulsarTrigger Pulsar { get; set; }

        /// <summary>
        /// Gets or Sets Slack
        /// </summary>
        [DataMember(Name = "slack", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1SlackTrigger Slack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1TriggerTemplate {\n");
            sb.Append("  ArgoWorkflow: ").Append(ArgoWorkflow).Append("\n");
            sb.Append("  AwsLambda: ").Append(AwsLambda).Append("\n");
            sb.Append("  AzureEventHubs: ").Append(AzureEventHubs).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  ConditionsReset: ").Append(ConditionsReset).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Http: ").Append(Http).Append("\n");
            sb.Append("  K8s: ").Append(K8s).Append("\n");
            sb.Append("  Kafka: ").Append(Kafka).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nats: ").Append(Nats).Append("\n");
            sb.Append("  OpenWhisk: ").Append(OpenWhisk).Append("\n");
            sb.Append("  Pulsar: ").Append(Pulsar).Append("\n");
            sb.Append("  Slack: ").Append(Slack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
