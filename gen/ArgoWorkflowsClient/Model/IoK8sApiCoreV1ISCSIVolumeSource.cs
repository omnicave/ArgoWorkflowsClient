/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.ISCSIVolumeSource")]
    public partial class IoK8sApiCoreV1ISCSIVolumeSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ISCSIVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1ISCSIVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ISCSIVolumeSource" /> class.
        /// </summary>
        /// <param name="chapAuthDiscovery">whether support iSCSI Discovery CHAP authentication.</param>
        /// <param name="chapAuthSession">whether support iSCSI Session CHAP authentication.</param>
        /// <param name="fsType">Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.</param>
        /// <param name="initiatorName">Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection..</param>
        /// <param name="iqn">Target iSCSI Qualified Name. (required).</param>
        /// <param name="iscsiInterface">iSCSI Interface Name that uses an iSCSI transport. Defaults to &#39;default&#39; (tcp)..</param>
        /// <param name="lun">iSCSI Target Lun number. (required).</param>
        /// <param name="portals">iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)..</param>
        /// <param name="varReadOnly">ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false..</param>
        /// <param name="secretRef">secretRef.</param>
        /// <param name="targetPortal">iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). (required).</param>
        public IoK8sApiCoreV1ISCSIVolumeSource(bool chapAuthDiscovery = default(bool), bool chapAuthSession = default(bool), string fsType = default(string), string initiatorName = default(string), string iqn = default(string), string iscsiInterface = default(string), int lun = default(int), List<string> portals = default(List<string>), bool varReadOnly = default(bool), IoK8sApiCoreV1LocalObjectReference secretRef = default(IoK8sApiCoreV1LocalObjectReference), string targetPortal = default(string))
        {
            // to ensure "iqn" is required (not null)
            if (iqn == null)
            {
                throw new ArgumentNullException("iqn is a required property for IoK8sApiCoreV1ISCSIVolumeSource and cannot be null");
            }
            this.Iqn = iqn;
            this.Lun = lun;
            // to ensure "targetPortal" is required (not null)
            if (targetPortal == null)
            {
                throw new ArgumentNullException("targetPortal is a required property for IoK8sApiCoreV1ISCSIVolumeSource and cannot be null");
            }
            this.TargetPortal = targetPortal;
            this.ChapAuthDiscovery = chapAuthDiscovery;
            this.ChapAuthSession = chapAuthSession;
            this.FsType = fsType;
            this.InitiatorName = initiatorName;
            this.IscsiInterface = iscsiInterface;
            this.Portals = portals;
            this.VarReadOnly = varReadOnly;
            this.SecretRef = secretRef;
        }

        /// <summary>
        /// whether support iSCSI Discovery CHAP authentication
        /// </summary>
        /// <value>whether support iSCSI Discovery CHAP authentication</value>
        [DataMember(Name = "chapAuthDiscovery", EmitDefaultValue = true)]
        public bool ChapAuthDiscovery { get; set; }

        /// <summary>
        /// whether support iSCSI Session CHAP authentication
        /// </summary>
        /// <value>whether support iSCSI Session CHAP authentication</value>
        [DataMember(Name = "chapAuthSession", EmitDefaultValue = true)]
        public bool ChapAuthSession { get; set; }

        /// <summary>
        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        /// </summary>
        /// <value>Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi</value>
        [DataMember(Name = "fsType", EmitDefaultValue = false)]
        public string FsType { get; set; }

        /// <summary>
        /// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection.
        /// </summary>
        /// <value>Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection.</value>
        [DataMember(Name = "initiatorName", EmitDefaultValue = false)]
        public string InitiatorName { get; set; }

        /// <summary>
        /// Target iSCSI Qualified Name.
        /// </summary>
        /// <value>Target iSCSI Qualified Name.</value>
        [DataMember(Name = "iqn", IsRequired = true, EmitDefaultValue = true)]
        public string Iqn { get; set; }

        /// <summary>
        /// iSCSI Interface Name that uses an iSCSI transport. Defaults to &#39;default&#39; (tcp).
        /// </summary>
        /// <value>iSCSI Interface Name that uses an iSCSI transport. Defaults to &#39;default&#39; (tcp).</value>
        [DataMember(Name = "iscsiInterface", EmitDefaultValue = false)]
        public string IscsiInterface { get; set; }

        /// <summary>
        /// iSCSI Target Lun number.
        /// </summary>
        /// <value>iSCSI Target Lun number.</value>
        [DataMember(Name = "lun", IsRequired = true, EmitDefaultValue = true)]
        public int Lun { get; set; }

        /// <summary>
        /// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        /// </summary>
        /// <value>iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).</value>
        [DataMember(Name = "portals", EmitDefaultValue = false)]
        public List<string> Portals { get; set; }

        /// <summary>
        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        /// </summary>
        /// <value>ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets SecretRef
        /// </summary>
        [DataMember(Name = "secretRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1LocalObjectReference SecretRef { get; set; }

        /// <summary>
        /// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        /// </summary>
        /// <value>iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).</value>
        [DataMember(Name = "targetPortal", IsRequired = true, EmitDefaultValue = true)]
        public string TargetPortal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1ISCSIVolumeSource {\n");
            sb.Append("  ChapAuthDiscovery: ").Append(ChapAuthDiscovery).Append("\n");
            sb.Append("  ChapAuthSession: ").Append(ChapAuthSession).Append("\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  InitiatorName: ").Append(InitiatorName).Append("\n");
            sb.Append("  Iqn: ").Append(Iqn).Append("\n");
            sb.Append("  IscsiInterface: ").Append(IscsiInterface).Append("\n");
            sb.Append("  Lun: ").Append(Lun).Append("\n");
            sb.Append("  Portals: ").Append(Portals).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  SecretRef: ").Append(SecretRef).Append("\n");
            sb.Append("  TargetPortal: ").Append(TargetPortal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
