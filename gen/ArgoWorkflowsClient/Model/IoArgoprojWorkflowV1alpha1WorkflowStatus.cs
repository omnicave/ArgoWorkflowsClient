/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// WorkflowStatus contains overall status information about a workflow
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.WorkflowStatus")]
    public partial class IoArgoprojWorkflowV1alpha1WorkflowStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1WorkflowStatus" /> class.
        /// </summary>
        /// <param name="artifactGCStatus">artifactGCStatus.</param>
        /// <param name="artifactRepositoryRef">artifactRepositoryRef.</param>
        /// <param name="compressedNodes">Compressed and base64 decoded Nodes map.</param>
        /// <param name="conditions">Conditions is a list of conditions the Workflow may have.</param>
        /// <param name="estimatedDuration">EstimatedDuration in seconds..</param>
        /// <param name="finishedAt">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers..</param>
        /// <param name="message">A human readable message indicating details about why the workflow is in this condition..</param>
        /// <param name="nodes">Nodes is a mapping between a node ID and the node&#39;s status..</param>
        /// <param name="offloadNodeStatusVersion">Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data..</param>
        /// <param name="outputs">outputs.</param>
        /// <param name="persistentVolumeClaims">PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow..</param>
        /// <param name="phase">Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \&quot;\&quot; (Unknown), \&quot;Pending\&quot;, or \&quot;Running\&quot; before the workflow is completed, and \&quot;Succeeded\&quot;, \&quot;Failed\&quot; or \&quot;Error\&quot; once the workflow has completed..</param>
        /// <param name="progress">Progress to completion.</param>
        /// <param name="resourcesDuration">ResourcesDuration is the total for the workflow.</param>
        /// <param name="startedAt">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers..</param>
        /// <param name="storedTemplates">StoredTemplates is a mapping between a template ref and the node&#39;s status..</param>
        /// <param name="storedWorkflowTemplateSpec">storedWorkflowTemplateSpec.</param>
        /// <param name="synchronization">synchronization.</param>
        public IoArgoprojWorkflowV1alpha1WorkflowStatus(IoArgoprojWorkflowV1alpha1ArtGCStatus artifactGCStatus = default(IoArgoprojWorkflowV1alpha1ArtGCStatus), IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus artifactRepositoryRef = default(IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus), string compressedNodes = default(string), List<IoArgoprojWorkflowV1alpha1Condition> conditions = default(List<IoArgoprojWorkflowV1alpha1Condition>), int estimatedDuration = default(int), DateTime finishedAt = default(DateTime), string message = default(string), Dictionary<string, IoArgoprojWorkflowV1alpha1NodeStatus> nodes = default(Dictionary<string, IoArgoprojWorkflowV1alpha1NodeStatus>), string offloadNodeStatusVersion = default(string), IoArgoprojWorkflowV1alpha1Outputs outputs = default(IoArgoprojWorkflowV1alpha1Outputs), List<IoK8sApiCoreV1Volume> persistentVolumeClaims = default(List<IoK8sApiCoreV1Volume>), string phase = default(string), string progress = default(string), Dictionary<string, long> resourcesDuration = default(Dictionary<string, long>), DateTime startedAt = default(DateTime), Dictionary<string, IoArgoprojWorkflowV1alpha1Template> storedTemplates = default(Dictionary<string, IoArgoprojWorkflowV1alpha1Template>), IoArgoprojWorkflowV1alpha1WorkflowSpec storedWorkflowTemplateSpec = default(IoArgoprojWorkflowV1alpha1WorkflowSpec), IoArgoprojWorkflowV1alpha1SynchronizationStatus synchronization = default(IoArgoprojWorkflowV1alpha1SynchronizationStatus))
        {
            this.ArtifactGCStatus = artifactGCStatus;
            this.ArtifactRepositoryRef = artifactRepositoryRef;
            this.CompressedNodes = compressedNodes;
            this.Conditions = conditions;
            this.EstimatedDuration = estimatedDuration;
            this.FinishedAt = finishedAt;
            this.Message = message;
            this.Nodes = nodes;
            this.OffloadNodeStatusVersion = offloadNodeStatusVersion;
            this.Outputs = outputs;
            this.PersistentVolumeClaims = persistentVolumeClaims;
            this.Phase = phase;
            this.Progress = progress;
            this.ResourcesDuration = resourcesDuration;
            this.StartedAt = startedAt;
            this.StoredTemplates = storedTemplates;
            this.StoredWorkflowTemplateSpec = storedWorkflowTemplateSpec;
            this.Synchronization = synchronization;
        }

        /// <summary>
        /// Gets or Sets ArtifactGCStatus
        /// </summary>
        [DataMember(Name = "artifactGCStatus", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ArtGCStatus ArtifactGCStatus { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactRepositoryRef
        /// </summary>
        [DataMember(Name = "artifactRepositoryRef", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus ArtifactRepositoryRef { get; set; }

        /// <summary>
        /// Compressed and base64 decoded Nodes map
        /// </summary>
        /// <value>Compressed and base64 decoded Nodes map</value>
        [DataMember(Name = "compressedNodes", EmitDefaultValue = false)]
        public string CompressedNodes { get; set; }

        /// <summary>
        /// Conditions is a list of conditions the Workflow may have
        /// </summary>
        /// <value>Conditions is a list of conditions the Workflow may have</value>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public List<IoArgoprojWorkflowV1alpha1Condition> Conditions { get; set; }

        /// <summary>
        /// EstimatedDuration in seconds.
        /// </summary>
        /// <value>EstimatedDuration in seconds.</value>
        [DataMember(Name = "estimatedDuration", EmitDefaultValue = false)]
        public int EstimatedDuration { get; set; }

        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name = "finishedAt", EmitDefaultValue = false)]
        public DateTime FinishedAt { get; set; }

        /// <summary>
        /// A human readable message indicating details about why the workflow is in this condition.
        /// </summary>
        /// <value>A human readable message indicating details about why the workflow is in this condition.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Nodes is a mapping between a node ID and the node&#39;s status.
        /// </summary>
        /// <value>Nodes is a mapping between a node ID and the node&#39;s status.</value>
        [DataMember(Name = "nodes", EmitDefaultValue = false)]
        public Dictionary<string, IoArgoprojWorkflowV1alpha1NodeStatus> Nodes { get; set; }

        /// <summary>
        /// Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
        /// </summary>
        /// <value>Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.</value>
        [DataMember(Name = "offloadNodeStatusVersion", EmitDefaultValue = false)]
        public string OffloadNodeStatusVersion { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name = "outputs", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Outputs Outputs { get; set; }

        /// <summary>
        /// PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
        /// </summary>
        /// <value>PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.</value>
        [DataMember(Name = "persistentVolumeClaims", EmitDefaultValue = false)]
        public List<IoK8sApiCoreV1Volume> PersistentVolumeClaims { get; set; }

        /// <summary>
        /// Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \&quot;\&quot; (Unknown), \&quot;Pending\&quot;, or \&quot;Running\&quot; before the workflow is completed, and \&quot;Succeeded\&quot;, \&quot;Failed\&quot; or \&quot;Error\&quot; once the workflow has completed.
        /// </summary>
        /// <value>Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \&quot;\&quot; (Unknown), \&quot;Pending\&quot;, or \&quot;Running\&quot; before the workflow is completed, and \&quot;Succeeded\&quot;, \&quot;Failed\&quot; or \&quot;Error\&quot; once the workflow has completed.</value>
        [DataMember(Name = "phase", EmitDefaultValue = false)]
        public string Phase { get; set; }

        /// <summary>
        /// Progress to completion
        /// </summary>
        /// <value>Progress to completion</value>
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public string Progress { get; set; }

        /// <summary>
        /// ResourcesDuration is the total for the workflow
        /// </summary>
        /// <value>ResourcesDuration is the total for the workflow</value>
        [DataMember(Name = "resourcesDuration", EmitDefaultValue = false)]
        public Dictionary<string, long> ResourcesDuration { get; set; }

        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = false)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// StoredTemplates is a mapping between a template ref and the node&#39;s status.
        /// </summary>
        /// <value>StoredTemplates is a mapping between a template ref and the node&#39;s status.</value>
        [DataMember(Name = "storedTemplates", EmitDefaultValue = false)]
        public Dictionary<string, IoArgoprojWorkflowV1alpha1Template> StoredTemplates { get; set; }

        /// <summary>
        /// Gets or Sets StoredWorkflowTemplateSpec
        /// </summary>
        [DataMember(Name = "storedWorkflowTemplateSpec", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1WorkflowSpec StoredWorkflowTemplateSpec { get; set; }

        /// <summary>
        /// Gets or Sets Synchronization
        /// </summary>
        [DataMember(Name = "synchronization", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1SynchronizationStatus Synchronization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1WorkflowStatus {\n");
            sb.Append("  ArtifactGCStatus: ").Append(ArtifactGCStatus).Append("\n");
            sb.Append("  ArtifactRepositoryRef: ").Append(ArtifactRepositoryRef).Append("\n");
            sb.Append("  CompressedNodes: ").Append(CompressedNodes).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  EstimatedDuration: ").Append(EstimatedDuration).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  OffloadNodeStatusVersion: ").Append(OffloadNodeStatusVersion).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  PersistentVolumeClaims: ").Append(PersistentVolumeClaims).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  ResourcesDuration: ").Append(ResourcesDuration).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  StoredTemplates: ").Append(StoredTemplates).Append("\n");
            sb.Append("  StoredWorkflowTemplateSpec: ").Append(StoredWorkflowTemplateSpec).Append("\n");
            sb.Append("  Synchronization: ").Append(Synchronization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
