/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// DownwardAPIVolumeFile represents information to create the file containing the pod field
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.DownwardAPIVolumeFile")]
    public partial class IoK8sApiCoreV1DownwardAPIVolumeFile : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1DownwardAPIVolumeFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1DownwardAPIVolumeFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1DownwardAPIVolumeFile" /> class.
        /// </summary>
        /// <param name="fieldRef">fieldRef.</param>
        /// <param name="mode">Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set..</param>
        /// <param name="path">Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the &#39;..&#39; path. Must be utf-8 encoded. The first item of the relative path must not start with &#39;..&#39; (required).</param>
        /// <param name="resourceFieldRef">resourceFieldRef.</param>
        public IoK8sApiCoreV1DownwardAPIVolumeFile(IoK8sApiCoreV1ObjectFieldSelector fieldRef = default(IoK8sApiCoreV1ObjectFieldSelector), int mode = default(int), string path = default(string), IoK8sApiCoreV1ResourceFieldSelector resourceFieldRef = default(IoK8sApiCoreV1ResourceFieldSelector))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for IoK8sApiCoreV1DownwardAPIVolumeFile and cannot be null");
            }
            this.Path = path;
            this.FieldRef = fieldRef;
            this.Mode = mode;
            this.ResourceFieldRef = resourceFieldRef;
        }

        /// <summary>
        /// Gets or Sets FieldRef
        /// </summary>
        [DataMember(Name = "fieldRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1ObjectFieldSelector FieldRef { get; set; }

        /// <summary>
        /// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        /// </summary>
        /// <value>Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public int Mode { get; set; }

        /// <summary>
        /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the &#39;..&#39; path. Must be utf-8 encoded. The first item of the relative path must not start with &#39;..&#39;
        /// </summary>
        /// <value>Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the &#39;..&#39; path. Must be utf-8 encoded. The first item of the relative path must not start with &#39;..&#39;</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets ResourceFieldRef
        /// </summary>
        [DataMember(Name = "resourceFieldRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1ResourceFieldSelector ResourceFieldRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1DownwardAPIVolumeFile {\n");
            sb.Append("  FieldRef: ").Append(FieldRef).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ResourceFieldRef: ").Append(ResourceFieldRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
