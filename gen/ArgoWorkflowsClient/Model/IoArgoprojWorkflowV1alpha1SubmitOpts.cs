/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// SubmitOpts are workflow submission options
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.SubmitOpts")]
    public partial class IoArgoprojWorkflowV1alpha1SubmitOpts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1SubmitOpts" /> class.
        /// </summary>
        /// <param name="annotations">Annotations adds to metadata.labels.</param>
        /// <param name="dryRun">DryRun validates the workflow on the client-side without creating it. This option is not supported in API.</param>
        /// <param name="entryPoint">Entrypoint overrides spec.entrypoint.</param>
        /// <param name="generateName">GenerateName overrides metadata.generateName.</param>
        /// <param name="labels">Labels adds to metadata.labels.</param>
        /// <param name="name">Name overrides metadata.name.</param>
        /// <param name="ownerReference">ownerReference.</param>
        /// <param name="parameters">Parameters passes input parameters to workflow.</param>
        /// <param name="podPriorityClassName">Set the podPriorityClassName of the workflow.</param>
        /// <param name="priority">Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first..</param>
        /// <param name="serverDryRun">ServerDryRun validates the workflow on the server-side without creating it.</param>
        /// <param name="serviceAccount">ServiceAccount runs all pods in the workflow using specified ServiceAccount..</param>
        public IoArgoprojWorkflowV1alpha1SubmitOpts(string annotations = default(string), bool dryRun = default(bool), string entryPoint = default(string), string generateName = default(string), string labels = default(string), string name = default(string), IoK8sApimachineryPkgApisMetaV1OwnerReference ownerReference = default(IoK8sApimachineryPkgApisMetaV1OwnerReference), List<string> parameters = default(List<string>), string podPriorityClassName = default(string), int priority = default(int), bool serverDryRun = default(bool), string serviceAccount = default(string))
        {
            this.Annotations = annotations;
            this.DryRun = dryRun;
            this.EntryPoint = entryPoint;
            this.GenerateName = generateName;
            this.Labels = labels;
            this.Name = name;
            this.OwnerReference = ownerReference;
            this.Parameters = parameters;
            this.PodPriorityClassName = podPriorityClassName;
            this.Priority = priority;
            this.ServerDryRun = serverDryRun;
            this.ServiceAccount = serviceAccount;
        }

        /// <summary>
        /// Annotations adds to metadata.labels
        /// </summary>
        /// <value>Annotations adds to metadata.labels</value>
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public string Annotations { get; set; }

        /// <summary>
        /// DryRun validates the workflow on the client-side without creating it. This option is not supported in API
        /// </summary>
        /// <value>DryRun validates the workflow on the client-side without creating it. This option is not supported in API</value>
        [DataMember(Name = "dryRun", EmitDefaultValue = true)]
        public bool DryRun { get; set; }

        /// <summary>
        /// Entrypoint overrides spec.entrypoint
        /// </summary>
        /// <value>Entrypoint overrides spec.entrypoint</value>
        [DataMember(Name = "entryPoint", EmitDefaultValue = false)]
        public string EntryPoint { get; set; }

        /// <summary>
        /// GenerateName overrides metadata.generateName
        /// </summary>
        /// <value>GenerateName overrides metadata.generateName</value>
        [DataMember(Name = "generateName", EmitDefaultValue = false)]
        public string GenerateName { get; set; }

        /// <summary>
        /// Labels adds to metadata.labels
        /// </summary>
        /// <value>Labels adds to metadata.labels</value>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public string Labels { get; set; }

        /// <summary>
        /// Name overrides metadata.name
        /// </summary>
        /// <value>Name overrides metadata.name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OwnerReference
        /// </summary>
        [DataMember(Name = "ownerReference", EmitDefaultValue = false)]
        public IoK8sApimachineryPkgApisMetaV1OwnerReference OwnerReference { get; set; }

        /// <summary>
        /// Parameters passes input parameters to workflow
        /// </summary>
        /// <value>Parameters passes input parameters to workflow</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<string> Parameters { get; set; }

        /// <summary>
        /// Set the podPriorityClassName of the workflow
        /// </summary>
        /// <value>Set the podPriorityClassName of the workflow</value>
        [DataMember(Name = "podPriorityClassName", EmitDefaultValue = false)]
        public string PodPriorityClassName { get; set; }

        /// <summary>
        /// Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first.
        /// </summary>
        /// <value>Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// ServerDryRun validates the workflow on the server-side without creating it
        /// </summary>
        /// <value>ServerDryRun validates the workflow on the server-side without creating it</value>
        [DataMember(Name = "serverDryRun", EmitDefaultValue = true)]
        public bool ServerDryRun { get; set; }

        /// <summary>
        /// ServiceAccount runs all pods in the workflow using specified ServiceAccount.
        /// </summary>
        /// <value>ServiceAccount runs all pods in the workflow using specified ServiceAccount.</value>
        [DataMember(Name = "serviceAccount", EmitDefaultValue = false)]
        public string ServiceAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1SubmitOpts {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  DryRun: ").Append(DryRun).Append("\n");
            sb.Append("  EntryPoint: ").Append(EntryPoint).Append("\n");
            sb.Append("  GenerateName: ").Append(GenerateName).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerReference: ").Append(OwnerReference).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  PodPriorityClassName: ").Append(PodPriorityClassName).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ServerDryRun: ").Append(ServerDryRun).Append("\n");
            sb.Append("  ServiceAccount: ").Append(ServiceAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
