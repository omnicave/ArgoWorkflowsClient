/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// WorkflowStep is a reference to a template to execute in a series of step
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.WorkflowStep")]
    public partial class IoArgoprojWorkflowV1alpha1WorkflowStep : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1WorkflowStep" /> class.
        /// </summary>
        /// <param name="arguments">arguments.</param>
        /// <param name="continueOn">continueOn.</param>
        /// <param name="hooks">Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step.</param>
        /// <param name="inline">inline.</param>
        /// <param name="name">Name of the step.</param>
        /// <param name="onExit">OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead..</param>
        /// <param name="template">Template is the name of the template to execute as the step.</param>
        /// <param name="templateRef">templateRef.</param>
        /// <param name="when">When is an expression in which the step should conditionally execute.</param>
        /// <param name="withItems">WithItems expands a step into multiple parallel steps from the items in the list.</param>
        /// <param name="withParam">WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list..</param>
        /// <param name="withSequence">withSequence.</param>
        public IoArgoprojWorkflowV1alpha1WorkflowStep(IoArgoprojWorkflowV1alpha1Arguments arguments = default(IoArgoprojWorkflowV1alpha1Arguments), IoArgoprojWorkflowV1alpha1ContinueOn continueOn = default(IoArgoprojWorkflowV1alpha1ContinueOn), Dictionary<string, IoArgoprojWorkflowV1alpha1LifecycleHook> hooks = default(Dictionary<string, IoArgoprojWorkflowV1alpha1LifecycleHook>), IoArgoprojWorkflowV1alpha1Template inline = default(IoArgoprojWorkflowV1alpha1Template), string name = default(string), string onExit = default(string), string template = default(string), IoArgoprojWorkflowV1alpha1TemplateRef templateRef = default(IoArgoprojWorkflowV1alpha1TemplateRef), string when = default(string), List<Object> withItems = default(List<Object>), string withParam = default(string), IoArgoprojWorkflowV1alpha1Sequence withSequence = default(IoArgoprojWorkflowV1alpha1Sequence))
        {
            this.Arguments = arguments;
            this.ContinueOn = continueOn;
            this.Hooks = hooks;
            this.Inline = inline;
            this.Name = name;
            this.OnExit = onExit;
            this.Template = template;
            this.TemplateRef = templateRef;
            this.When = when;
            this.WithItems = withItems;
            this.WithParam = withParam;
            this.WithSequence = withSequence;
        }

        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name = "arguments", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Arguments Arguments { get; set; }

        /// <summary>
        /// Gets or Sets ContinueOn
        /// </summary>
        [DataMember(Name = "continueOn", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1ContinueOn ContinueOn { get; set; }

        /// <summary>
        /// Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step
        /// </summary>
        /// <value>Hooks holds the lifecycle hook which is invoked at lifecycle of step, irrespective of the success, failure, or error status of the primary step</value>
        [DataMember(Name = "hooks", EmitDefaultValue = false)]
        public Dictionary<string, IoArgoprojWorkflowV1alpha1LifecycleHook> Hooks { get; set; }

        /// <summary>
        /// Gets or Sets Inline
        /// </summary>
        [DataMember(Name = "inline", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Template Inline { get; set; }

        /// <summary>
        /// Name of the step
        /// </summary>
        /// <value>Name of the step</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.
        /// </summary>
        /// <value>OnExit is a template reference which is invoked at the end of the template, irrespective of the success, failure, or error of the primary template. DEPRECATED: Use Hooks[exit].Template instead.</value>
        [DataMember(Name = "onExit", EmitDefaultValue = false)]
        public string OnExit { get; set; }

        /// <summary>
        /// Template is the name of the template to execute as the step
        /// </summary>
        /// <value>Template is the name of the template to execute as the step</value>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public string Template { get; set; }

        /// <summary>
        /// Gets or Sets TemplateRef
        /// </summary>
        [DataMember(Name = "templateRef", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1TemplateRef TemplateRef { get; set; }

        /// <summary>
        /// When is an expression in which the step should conditionally execute
        /// </summary>
        /// <value>When is an expression in which the step should conditionally execute</value>
        [DataMember(Name = "when", EmitDefaultValue = false)]
        public string When { get; set; }

        /// <summary>
        /// WithItems expands a step into multiple parallel steps from the items in the list
        /// </summary>
        /// <value>WithItems expands a step into multiple parallel steps from the items in the list</value>
        [DataMember(Name = "withItems", EmitDefaultValue = false)]
        public List<Object> WithItems { get; set; }

        /// <summary>
        /// WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.
        /// </summary>
        /// <value>WithParam expands a step into multiple parallel steps from the value in the parameter, which is expected to be a JSON list.</value>
        [DataMember(Name = "withParam", EmitDefaultValue = false)]
        public string WithParam { get; set; }

        /// <summary>
        /// Gets or Sets WithSequence
        /// </summary>
        [DataMember(Name = "withSequence", EmitDefaultValue = false)]
        public IoArgoprojWorkflowV1alpha1Sequence WithSequence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1WorkflowStep {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  ContinueOn: ").Append(ContinueOn).Append("\n");
            sb.Append("  Hooks: ").Append(Hooks).Append("\n");
            sb.Append("  Inline: ").Append(Inline).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnExit: ").Append(OnExit).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TemplateRef: ").Append(TemplateRef).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  WithItems: ").Append(WithItems).Append("\n");
            sb.Append("  WithParam: ").Append(WithParam).Append("\n");
            sb.Append("  WithSequence: ").Append(WithSequence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
