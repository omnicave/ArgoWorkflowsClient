/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// CronWorkflowSpec is the specification of a CronWorkflow
    /// </summary>
    [DataContract(Name = "io.argoproj.workflow.v1alpha1.CronWorkflowSpec")]
    public partial class IoArgoprojWorkflowV1alpha1CronWorkflowSpec : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1CronWorkflowSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoArgoprojWorkflowV1alpha1CronWorkflowSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojWorkflowV1alpha1CronWorkflowSpec" /> class.
        /// </summary>
        /// <param name="concurrencyPolicy">ConcurrencyPolicy is the K8s-style concurrency policy that will be used.</param>
        /// <param name="failedJobsHistoryLimit">FailedJobsHistoryLimit is the number of failed jobs to be kept at a time.</param>
        /// <param name="schedule">Schedule is a schedule to run the Workflow in Cron format (required).</param>
        /// <param name="startingDeadlineSeconds">StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed..</param>
        /// <param name="successfulJobsHistoryLimit">SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time.</param>
        /// <param name="suspend">Suspend is a flag that will stop new CronWorkflows from running if set to true.</param>
        /// <param name="timezone">Timezone is the timezone against which the cron schedule will be calculated, e.g. \&quot;Asia/Tokyo\&quot;. Default is machine&#39;s local time..</param>
        /// <param name="workflowMetadata">workflowMetadata.</param>
        /// <param name="workflowSpec">workflowSpec (required).</param>
        public IoArgoprojWorkflowV1alpha1CronWorkflowSpec(string concurrencyPolicy = default(string), int failedJobsHistoryLimit = default(int), string schedule = default(string), int startingDeadlineSeconds = default(int), int successfulJobsHistoryLimit = default(int), bool suspend = default(bool), string timezone = default(string), IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata = default(IoK8sApimachineryPkgApisMetaV1ObjectMeta), IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec = default(IoArgoprojWorkflowV1alpha1WorkflowSpec))
        {
            // to ensure "schedule" is required (not null)
            if (schedule == null)
            {
                throw new ArgumentNullException("schedule is a required property for IoArgoprojWorkflowV1alpha1CronWorkflowSpec and cannot be null");
            }
            this.Schedule = schedule;
            // to ensure "workflowSpec" is required (not null)
            if (workflowSpec == null)
            {
                throw new ArgumentNullException("workflowSpec is a required property for IoArgoprojWorkflowV1alpha1CronWorkflowSpec and cannot be null");
            }
            this.WorkflowSpec = workflowSpec;
            this.ConcurrencyPolicy = concurrencyPolicy;
            this.FailedJobsHistoryLimit = failedJobsHistoryLimit;
            this.StartingDeadlineSeconds = startingDeadlineSeconds;
            this.SuccessfulJobsHistoryLimit = successfulJobsHistoryLimit;
            this.Suspend = suspend;
            this.Timezone = timezone;
            this.WorkflowMetadata = workflowMetadata;
        }

        /// <summary>
        /// ConcurrencyPolicy is the K8s-style concurrency policy that will be used
        /// </summary>
        /// <value>ConcurrencyPolicy is the K8s-style concurrency policy that will be used</value>
        [DataMember(Name = "concurrencyPolicy", EmitDefaultValue = false)]
        public string ConcurrencyPolicy { get; set; }

        /// <summary>
        /// FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
        /// </summary>
        /// <value>FailedJobsHistoryLimit is the number of failed jobs to be kept at a time</value>
        [DataMember(Name = "failedJobsHistoryLimit", EmitDefaultValue = false)]
        public int FailedJobsHistoryLimit { get; set; }

        /// <summary>
        /// Schedule is a schedule to run the Workflow in Cron format
        /// </summary>
        /// <value>Schedule is a schedule to run the Workflow in Cron format</value>
        [DataMember(Name = "schedule", IsRequired = true, EmitDefaultValue = true)]
        public string Schedule { get; set; }

        /// <summary>
        /// StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
        /// </summary>
        /// <value>StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.</value>
        [DataMember(Name = "startingDeadlineSeconds", EmitDefaultValue = false)]
        public int StartingDeadlineSeconds { get; set; }

        /// <summary>
        /// SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
        /// </summary>
        /// <value>SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time</value>
        [DataMember(Name = "successfulJobsHistoryLimit", EmitDefaultValue = false)]
        public int SuccessfulJobsHistoryLimit { get; set; }

        /// <summary>
        /// Suspend is a flag that will stop new CronWorkflows from running if set to true
        /// </summary>
        /// <value>Suspend is a flag that will stop new CronWorkflows from running if set to true</value>
        [DataMember(Name = "suspend", EmitDefaultValue = true)]
        public bool Suspend { get; set; }

        /// <summary>
        /// Timezone is the timezone against which the cron schedule will be calculated, e.g. \&quot;Asia/Tokyo\&quot;. Default is machine&#39;s local time.
        /// </summary>
        /// <value>Timezone is the timezone against which the cron schedule will be calculated, e.g. \&quot;Asia/Tokyo\&quot;. Default is machine&#39;s local time.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowMetadata
        /// </summary>
        [DataMember(Name = "workflowMetadata", EmitDefaultValue = false)]
        public IoK8sApimachineryPkgApisMetaV1ObjectMeta WorkflowMetadata { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowSpec
        /// </summary>
        [DataMember(Name = "workflowSpec", IsRequired = true, EmitDefaultValue = true)]
        public IoArgoprojWorkflowV1alpha1WorkflowSpec WorkflowSpec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojWorkflowV1alpha1CronWorkflowSpec {\n");
            sb.Append("  ConcurrencyPolicy: ").Append(ConcurrencyPolicy).Append("\n");
            sb.Append("  FailedJobsHistoryLimit: ").Append(FailedJobsHistoryLimit).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  StartingDeadlineSeconds: ").Append(StartingDeadlineSeconds).Append("\n");
            sb.Append("  SuccessfulJobsHistoryLimit: ").Append(SuccessfulJobsHistoryLimit).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  WorkflowMetadata: ").Append(WorkflowMetadata).Append("\n");
            sb.Append("  WorkflowSpec: ").Append(WorkflowSpec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
