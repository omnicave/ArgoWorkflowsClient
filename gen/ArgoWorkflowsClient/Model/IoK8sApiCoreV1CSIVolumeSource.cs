/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// Represents a source location of a volume to mount, managed by an external CSI driver
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.CSIVolumeSource")]
    public partial class IoK8sApiCoreV1CSIVolumeSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1CSIVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1CSIVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1CSIVolumeSource" /> class.
        /// </summary>
        /// <param name="driver">Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster. (required).</param>
        /// <param name="fsType">Filesystem type to mount. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply..</param>
        /// <param name="nodePublishSecretRef">nodePublishSecretRef.</param>
        /// <param name="varReadOnly">Specifies a read-only configuration for the volume. Defaults to false (read/write)..</param>
        /// <param name="volumeAttributes">VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values..</param>
        public IoK8sApiCoreV1CSIVolumeSource(string driver = default(string), string fsType = default(string), IoK8sApiCoreV1LocalObjectReference nodePublishSecretRef = default(IoK8sApiCoreV1LocalObjectReference), bool varReadOnly = default(bool), Dictionary<string, string> volumeAttributes = default(Dictionary<string, string>))
        {
            // to ensure "driver" is required (not null)
            if (driver == null)
            {
                throw new ArgumentNullException("driver is a required property for IoK8sApiCoreV1CSIVolumeSource and cannot be null");
            }
            this.Driver = driver;
            this.FsType = fsType;
            this.NodePublishSecretRef = nodePublishSecretRef;
            this.VarReadOnly = varReadOnly;
            this.VolumeAttributes = volumeAttributes;
        }

        /// <summary>
        /// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        /// </summary>
        /// <value>Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.</value>
        [DataMember(Name = "driver", IsRequired = true, EmitDefaultValue = true)]
        public string Driver { get; set; }

        /// <summary>
        /// Filesystem type to mount. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        /// </summary>
        /// <value>Filesystem type to mount. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.</value>
        [DataMember(Name = "fsType", EmitDefaultValue = false)]
        public string FsType { get; set; }

        /// <summary>
        /// Gets or Sets NodePublishSecretRef
        /// </summary>
        [DataMember(Name = "nodePublishSecretRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1LocalObjectReference NodePublishSecretRef { get; set; }

        /// <summary>
        /// Specifies a read-only configuration for the volume. Defaults to false (read/write).
        /// </summary>
        /// <value>Specifies a read-only configuration for the volume. Defaults to false (read/write).</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.
        /// </summary>
        /// <value>VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.</value>
        [DataMember(Name = "volumeAttributes", EmitDefaultValue = false)]
        public Dictionary<string, string> VolumeAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1CSIVolumeSource {\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  NodePublishSecretRef: ").Append(NodePublishSecretRef).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  VolumeAttributes: ").Append(VolumeAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
