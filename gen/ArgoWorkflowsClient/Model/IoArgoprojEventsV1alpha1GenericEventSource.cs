/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// GenericEventSource refers to a generic event source. It can be used to implement a custom event source.
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.GenericEventSource")]
    public partial class IoArgoprojEventsV1alpha1GenericEventSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1GenericEventSource" /> class.
        /// </summary>
        /// <param name="authSecret">authSecret.</param>
        /// <param name="config">config.</param>
        /// <param name="filter">filter.</param>
        /// <param name="insecure">Insecure determines the type of connection..</param>
        /// <param name="jsonBody">jsonBody.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="url">URL of the gRPC server that implements the event source..</param>
        public IoArgoprojEventsV1alpha1GenericEventSource(IoK8sApiCoreV1SecretKeySelector authSecret = default(IoK8sApiCoreV1SecretKeySelector), string config = default(string), IoArgoprojEventsV1alpha1EventSourceFilter filter = default(IoArgoprojEventsV1alpha1EventSourceFilter), bool insecure = default(bool), bool jsonBody = default(bool), Dictionary<string, string> metadata = default(Dictionary<string, string>), string url = default(string))
        {
            this.AuthSecret = authSecret;
            this.Config = config;
            this.Filter = filter;
            this.Insecure = insecure;
            this.JsonBody = jsonBody;
            this.Metadata = metadata;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets AuthSecret
        /// </summary>
        [DataMember(Name = "authSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector AuthSecret { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public string Config { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1EventSourceFilter Filter { get; set; }

        /// <summary>
        /// Insecure determines the type of connection.
        /// </summary>
        /// <value>Insecure determines the type of connection.</value>
        [DataMember(Name = "insecure", EmitDefaultValue = true)]
        public bool Insecure { get; set; }

        /// <summary>
        /// Gets or Sets JsonBody
        /// </summary>
        [DataMember(Name = "jsonBody", EmitDefaultValue = true)]
        public bool JsonBody { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// URL of the gRPC server that implements the event source.
        /// </summary>
        /// <value>URL of the gRPC server that implements the event source.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1GenericEventSource {\n");
            sb.Append("  AuthSecret: ").Append(AuthSecret).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Insecure: ").Append(Insecure).Append("\n");
            sb.Append("  JsonBody: ").Append(JsonBody).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
