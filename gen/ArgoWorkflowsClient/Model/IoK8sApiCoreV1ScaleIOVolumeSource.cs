/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// ScaleIOVolumeSource represents a persistent ScaleIO volume
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.ScaleIOVolumeSource")]
    public partial class IoK8sApiCoreV1ScaleIOVolumeSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ScaleIOVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1ScaleIOVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ScaleIOVolumeSource" /> class.
        /// </summary>
        /// <param name="fsType">Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Default is \&quot;xfs\&quot;..</param>
        /// <param name="gateway">The host address of the ScaleIO API Gateway. (required).</param>
        /// <param name="protectionDomain">The name of the ScaleIO Protection Domain for the configured storage..</param>
        /// <param name="varReadOnly">Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts..</param>
        /// <param name="secretRef">secretRef (required).</param>
        /// <param name="sslEnabled">Flag to enable/disable SSL communication with Gateway, default false.</param>
        /// <param name="storageMode">Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned..</param>
        /// <param name="storagePool">The ScaleIO Storage Pool associated with the protection domain..</param>
        /// <param name="varSystem">The name of the storage system as configured in ScaleIO. (required).</param>
        /// <param name="volumeName">The name of a volume already created in the ScaleIO system that is associated with this volume source..</param>
        public IoK8sApiCoreV1ScaleIOVolumeSource(string fsType = default(string), string gateway = default(string), string protectionDomain = default(string), bool varReadOnly = default(bool), IoK8sApiCoreV1LocalObjectReference secretRef = default(IoK8sApiCoreV1LocalObjectReference), bool sslEnabled = default(bool), string storageMode = default(string), string storagePool = default(string), string varSystem = default(string), string volumeName = default(string))
        {
            // to ensure "gateway" is required (not null)
            if (gateway == null)
            {
                throw new ArgumentNullException("gateway is a required property for IoK8sApiCoreV1ScaleIOVolumeSource and cannot be null");
            }
            this.Gateway = gateway;
            // to ensure "secretRef" is required (not null)
            if (secretRef == null)
            {
                throw new ArgumentNullException("secretRef is a required property for IoK8sApiCoreV1ScaleIOVolumeSource and cannot be null");
            }
            this.SecretRef = secretRef;
            // to ensure "varSystem" is required (not null)
            if (varSystem == null)
            {
                throw new ArgumentNullException("varSystem is a required property for IoK8sApiCoreV1ScaleIOVolumeSource and cannot be null");
            }
            this.VarSystem = varSystem;
            this.FsType = fsType;
            this.ProtectionDomain = protectionDomain;
            this.VarReadOnly = varReadOnly;
            this.SslEnabled = sslEnabled;
            this.StorageMode = storageMode;
            this.StoragePool = storagePool;
            this.VolumeName = volumeName;
        }

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Default is \&quot;xfs\&quot;.
        /// </summary>
        /// <value>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Default is \&quot;xfs\&quot;.</value>
        [DataMember(Name = "fsType", EmitDefaultValue = false)]
        public string FsType { get; set; }

        /// <summary>
        /// The host address of the ScaleIO API Gateway.
        /// </summary>
        /// <value>The host address of the ScaleIO API Gateway.</value>
        [DataMember(Name = "gateway", IsRequired = true, EmitDefaultValue = true)]
        public string Gateway { get; set; }

        /// <summary>
        /// The name of the ScaleIO Protection Domain for the configured storage.
        /// </summary>
        /// <value>The name of the ScaleIO Protection Domain for the configured storage.</value>
        [DataMember(Name = "protectionDomain", EmitDefaultValue = false)]
        public string ProtectionDomain { get; set; }

        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        /// </summary>
        /// <value>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets SecretRef
        /// </summary>
        [DataMember(Name = "secretRef", IsRequired = true, EmitDefaultValue = true)]
        public IoK8sApiCoreV1LocalObjectReference SecretRef { get; set; }

        /// <summary>
        /// Flag to enable/disable SSL communication with Gateway, default false
        /// </summary>
        /// <value>Flag to enable/disable SSL communication with Gateway, default false</value>
        [DataMember(Name = "sslEnabled", EmitDefaultValue = true)]
        public bool SslEnabled { get; set; }

        /// <summary>
        /// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        /// </summary>
        /// <value>Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.</value>
        [DataMember(Name = "storageMode", EmitDefaultValue = false)]
        public string StorageMode { get; set; }

        /// <summary>
        /// The ScaleIO Storage Pool associated with the protection domain.
        /// </summary>
        /// <value>The ScaleIO Storage Pool associated with the protection domain.</value>
        [DataMember(Name = "storagePool", EmitDefaultValue = false)]
        public string StoragePool { get; set; }

        /// <summary>
        /// The name of the storage system as configured in ScaleIO.
        /// </summary>
        /// <value>The name of the storage system as configured in ScaleIO.</value>
        [DataMember(Name = "system", IsRequired = true, EmitDefaultValue = true)]
        public string VarSystem { get; set; }

        /// <summary>
        /// The name of a volume already created in the ScaleIO system that is associated with this volume source.
        /// </summary>
        /// <value>The name of a volume already created in the ScaleIO system that is associated with this volume source.</value>
        [DataMember(Name = "volumeName", EmitDefaultValue = false)]
        public string VolumeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1ScaleIOVolumeSource {\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  ProtectionDomain: ").Append(ProtectionDomain).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  SecretRef: ").Append(SecretRef).Append("\n");
            sb.Append("  SslEnabled: ").Append(SslEnabled).Append("\n");
            sb.Append("  StorageMode: ").Append(StorageMode).Append("\n");
            sb.Append("  StoragePool: ").Append(StoragePool).Append("\n");
            sb.Append("  VarSystem: ").Append(VarSystem).Append("\n");
            sb.Append("  VolumeName: ").Append(VolumeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
