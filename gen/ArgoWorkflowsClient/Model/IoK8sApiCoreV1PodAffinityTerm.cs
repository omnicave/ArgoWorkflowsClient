/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key &lt;topologyKey&gt; matches that of any node on which a pod of the set of pods is running
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.PodAffinityTerm")]
    public partial class IoK8sApiCoreV1PodAffinityTerm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1PodAffinityTerm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1PodAffinityTerm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1PodAffinityTerm" /> class.
        /// </summary>
        /// <param name="labelSelector">labelSelector.</param>
        /// <param name="namespaceSelector">namespaceSelector.</param>
        /// <param name="namespaces">namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \&quot;this pod&#39;s namespace\&quot;.</param>
        /// <param name="topologyKey">This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. (required).</param>
        public IoK8sApiCoreV1PodAffinityTerm(IoK8sApimachineryPkgApisMetaV1LabelSelector labelSelector = default(IoK8sApimachineryPkgApisMetaV1LabelSelector), IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = default(IoK8sApimachineryPkgApisMetaV1LabelSelector), List<string> namespaces = default(List<string>), string topologyKey = default(string))
        {
            // to ensure "topologyKey" is required (not null)
            if (topologyKey == null)
            {
                throw new ArgumentNullException("topologyKey is a required property for IoK8sApiCoreV1PodAffinityTerm and cannot be null");
            }
            this.TopologyKey = topologyKey;
            this.LabelSelector = labelSelector;
            this.NamespaceSelector = namespaceSelector;
            this.Namespaces = namespaces;
        }

        /// <summary>
        /// Gets or Sets LabelSelector
        /// </summary>
        [DataMember(Name = "labelSelector", EmitDefaultValue = false)]
        public IoK8sApimachineryPkgApisMetaV1LabelSelector LabelSelector { get; set; }

        /// <summary>
        /// Gets or Sets NamespaceSelector
        /// </summary>
        [DataMember(Name = "namespaceSelector", EmitDefaultValue = false)]
        public IoK8sApimachineryPkgApisMetaV1LabelSelector NamespaceSelector { get; set; }

        /// <summary>
        /// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \&quot;this pod&#39;s namespace\&quot;
        /// </summary>
        /// <value>namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \&quot;this pod&#39;s namespace\&quot;</value>
        [DataMember(Name = "namespaces", EmitDefaultValue = false)]
        public List<string> Namespaces { get; set; }

        /// <summary>
        /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        /// </summary>
        /// <value>This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.</value>
        [DataMember(Name = "topologyKey", IsRequired = true, EmitDefaultValue = true)]
        public string TopologyKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1PodAffinityTerm {\n");
            sb.Append("  LabelSelector: ").Append(LabelSelector).Append("\n");
            sb.Append("  NamespaceSelector: ").Append(NamespaceSelector).Append("\n");
            sb.Append("  Namespaces: ").Append(Namespaces).Append("\n");
            sb.Append("  TopologyKey: ").Append(TopologyKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
