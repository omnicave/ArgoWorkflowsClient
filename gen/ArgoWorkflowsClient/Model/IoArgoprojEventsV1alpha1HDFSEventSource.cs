/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// IoArgoprojEventsV1alpha1HDFSEventSource
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.HDFSEventSource")]
    public partial class IoArgoprojEventsV1alpha1HDFSEventSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1HDFSEventSource" /> class.
        /// </summary>
        /// <param name="addresses">addresses.</param>
        /// <param name="checkInterval">checkInterval.</param>
        /// <param name="filter">filter.</param>
        /// <param name="hdfsUser">HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used..</param>
        /// <param name="krbCCacheSecret">krbCCacheSecret.</param>
        /// <param name="krbConfigConfigMap">krbConfigConfigMap.</param>
        /// <param name="krbKeytabSecret">krbKeytabSecret.</param>
        /// <param name="krbRealm">KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used..</param>
        /// <param name="krbServicePrincipalName">KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used..</param>
        /// <param name="krbUsername">KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="type">type.</param>
        /// <param name="watchPathConfig">watchPathConfig.</param>
        public IoArgoprojEventsV1alpha1HDFSEventSource(List<string> addresses = default(List<string>), string checkInterval = default(string), IoArgoprojEventsV1alpha1EventSourceFilter filter = default(IoArgoprojEventsV1alpha1EventSourceFilter), string hdfsUser = default(string), IoK8sApiCoreV1SecretKeySelector krbCCacheSecret = default(IoK8sApiCoreV1SecretKeySelector), IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap = default(IoK8sApiCoreV1ConfigMapKeySelector), IoK8sApiCoreV1SecretKeySelector krbKeytabSecret = default(IoK8sApiCoreV1SecretKeySelector), string krbRealm = default(string), string krbServicePrincipalName = default(string), string krbUsername = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string type = default(string), IoArgoprojEventsV1alpha1WatchPathConfig watchPathConfig = default(IoArgoprojEventsV1alpha1WatchPathConfig))
        {
            this.Addresses = addresses;
            this.CheckInterval = checkInterval;
            this.Filter = filter;
            this.HdfsUser = hdfsUser;
            this.KrbCCacheSecret = krbCCacheSecret;
            this.KrbConfigConfigMap = krbConfigConfigMap;
            this.KrbKeytabSecret = krbKeytabSecret;
            this.KrbRealm = krbRealm;
            this.KrbServicePrincipalName = krbServicePrincipalName;
            this.KrbUsername = krbUsername;
            this.Metadata = metadata;
            this.Type = type;
            this.WatchPathConfig = watchPathConfig;
        }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets CheckInterval
        /// </summary>
        [DataMember(Name = "checkInterval", EmitDefaultValue = false)]
        public string CheckInterval { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1EventSourceFilter Filter { get; set; }

        /// <summary>
        /// HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
        /// </summary>
        /// <value>HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.</value>
        [DataMember(Name = "hdfsUser", EmitDefaultValue = false)]
        public string HdfsUser { get; set; }

        /// <summary>
        /// Gets or Sets KrbCCacheSecret
        /// </summary>
        [DataMember(Name = "krbCCacheSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector KrbCCacheSecret { get; set; }

        /// <summary>
        /// Gets or Sets KrbConfigConfigMap
        /// </summary>
        [DataMember(Name = "krbConfigConfigMap", EmitDefaultValue = false)]
        public IoK8sApiCoreV1ConfigMapKeySelector KrbConfigConfigMap { get; set; }

        /// <summary>
        /// Gets or Sets KrbKeytabSecret
        /// </summary>
        [DataMember(Name = "krbKeytabSecret", EmitDefaultValue = false)]
        public IoK8sApiCoreV1SecretKeySelector KrbKeytabSecret { get; set; }

        /// <summary>
        /// KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
        /// </summary>
        /// <value>KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.</value>
        [DataMember(Name = "krbRealm", EmitDefaultValue = false)]
        public string KrbRealm { get; set; }

        /// <summary>
        /// KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
        /// </summary>
        /// <value>KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.</value>
        [DataMember(Name = "krbServicePrincipalName", EmitDefaultValue = false)]
        public string KrbServicePrincipalName { get; set; }

        /// <summary>
        /// KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
        /// </summary>
        /// <value>KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.</value>
        [DataMember(Name = "krbUsername", EmitDefaultValue = false)]
        public string KrbUsername { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets WatchPathConfig
        /// </summary>
        [DataMember(Name = "watchPathConfig", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1WatchPathConfig WatchPathConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1HDFSEventSource {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  CheckInterval: ").Append(CheckInterval).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  HdfsUser: ").Append(HdfsUser).Append("\n");
            sb.Append("  KrbCCacheSecret: ").Append(KrbCCacheSecret).Append("\n");
            sb.Append("  KrbConfigConfigMap: ").Append(KrbConfigConfigMap).Append("\n");
            sb.Append("  KrbKeytabSecret: ").Append(KrbKeytabSecret).Append("\n");
            sb.Append("  KrbRealm: ").Append(KrbRealm).Append("\n");
            sb.Append("  KrbServicePrincipalName: ").Append(KrbServicePrincipalName).Append("\n");
            sb.Append("  KrbUsername: ").Append(KrbUsername).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WatchPathConfig: ").Append(WatchPathConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
