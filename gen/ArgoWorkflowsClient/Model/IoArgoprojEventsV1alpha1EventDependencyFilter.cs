/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// EventDependencyFilter defines filters and constraints for a io.argoproj.workflow.v1alpha1.
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.EventDependencyFilter")]
    public partial class IoArgoprojEventsV1alpha1EventDependencyFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1EventDependencyFilter" /> class.
        /// </summary>
        /// <param name="context">context.</param>
        /// <param name="data">data.</param>
        /// <param name="dataLogicalOperator">DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;)..</param>
        /// <param name="exprLogicalOperator">ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;)..</param>
        /// <param name="exprs">Exprs contains the list of expressions evaluated against the event payload..</param>
        /// <param name="script">Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1..</param>
        /// <param name="time">time.</param>
        public IoArgoprojEventsV1alpha1EventDependencyFilter(IoArgoprojEventsV1alpha1EventContext context = default(IoArgoprojEventsV1alpha1EventContext), List<IoArgoprojEventsV1alpha1DataFilter> data = default(List<IoArgoprojEventsV1alpha1DataFilter>), string dataLogicalOperator = default(string), string exprLogicalOperator = default(string), List<IoArgoprojEventsV1alpha1ExprFilter> exprs = default(List<IoArgoprojEventsV1alpha1ExprFilter>), string script = default(string), IoArgoprojEventsV1alpha1TimeFilter time = default(IoArgoprojEventsV1alpha1TimeFilter))
        {
            this.Context = context;
            this.Data = data;
            this.DataLogicalOperator = dataLogicalOperator;
            this.ExprLogicalOperator = exprLogicalOperator;
            this.Exprs = exprs;
            this.Script = script;
            this.Time = time;
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1EventContext Context { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1DataFilter> Data { get; set; }

        /// <summary>
        /// DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).
        /// </summary>
        /// <value>DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).</value>
        [DataMember(Name = "dataLogicalOperator", EmitDefaultValue = false)]
        public string DataLogicalOperator { get; set; }

        /// <summary>
        /// ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).
        /// </summary>
        /// <value>ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).</value>
        [DataMember(Name = "exprLogicalOperator", EmitDefaultValue = false)]
        public string ExprLogicalOperator { get; set; }

        /// <summary>
        /// Exprs contains the list of expressions evaluated against the event payload.
        /// </summary>
        /// <value>Exprs contains the list of expressions evaluated against the event payload.</value>
        [DataMember(Name = "exprs", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1ExprFilter> Exprs { get; set; }

        /// <summary>
        /// Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.
        /// </summary>
        /// <value>Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.</value>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1TimeFilter Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1EventDependencyFilter {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DataLogicalOperator: ").Append(DataLogicalOperator).Append("\n");
            sb.Append("  ExprLogicalOperator: ").Append(ExprLogicalOperator).Append("\n");
            sb.Append("  Exprs: ").Append(Exprs).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
