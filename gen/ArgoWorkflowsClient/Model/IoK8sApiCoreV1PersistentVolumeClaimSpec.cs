/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.PersistentVolumeClaimSpec")]
    public partial class IoK8sApiCoreV1PersistentVolumeClaimSpec : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1PersistentVolumeClaimSpec" /> class.
        /// </summary>
        /// <param name="accessModes">AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.</param>
        /// <param name="dataSource">dataSource.</param>
        /// <param name="dataSourceRef">dataSourceRef.</param>
        /// <param name="resources">resources.</param>
        /// <param name="selector">selector.</param>
        /// <param name="storageClassName">Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.</param>
        /// <param name="volumeMode">volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec..</param>
        /// <param name="volumeName">VolumeName is the binding reference to the PersistentVolume backing this claim..</param>
        public IoK8sApiCoreV1PersistentVolumeClaimSpec(List<string> accessModes = default(List<string>), IoK8sApiCoreV1TypedLocalObjectReference dataSource = default(IoK8sApiCoreV1TypedLocalObjectReference), IoK8sApiCoreV1TypedLocalObjectReference dataSourceRef = default(IoK8sApiCoreV1TypedLocalObjectReference), IoK8sApiCoreV1ResourceRequirements resources = default(IoK8sApiCoreV1ResourceRequirements), IoK8sApimachineryPkgApisMetaV1LabelSelector selector = default(IoK8sApimachineryPkgApisMetaV1LabelSelector), string storageClassName = default(string), string volumeMode = default(string), string volumeName = default(string))
        {
            this.AccessModes = accessModes;
            this.DataSource = dataSource;
            this.DataSourceRef = dataSourceRef;
            this.Resources = resources;
            this.Selector = selector;
            this.StorageClassName = storageClassName;
            this.VolumeMode = volumeMode;
            this.VolumeName = volumeName;
        }

        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        /// <value>AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1</value>
        [DataMember(Name = "accessModes", EmitDefaultValue = false)]
        public List<string> AccessModes { get; set; }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name = "dataSource", EmitDefaultValue = false)]
        public IoK8sApiCoreV1TypedLocalObjectReference DataSource { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceRef
        /// </summary>
        [DataMember(Name = "dataSourceRef", EmitDefaultValue = false)]
        public IoK8sApiCoreV1TypedLocalObjectReference DataSourceRef { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", EmitDefaultValue = false)]
        public IoK8sApiCoreV1ResourceRequirements Resources { get; set; }

        /// <summary>
        /// Gets or Sets Selector
        /// </summary>
        [DataMember(Name = "selector", EmitDefaultValue = false)]
        public IoK8sApimachineryPkgApisMetaV1LabelSelector Selector { get; set; }

        /// <summary>
        /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </summary>
        /// <value>Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1</value>
        [DataMember(Name = "storageClassName", EmitDefaultValue = false)]
        public string StorageClassName { get; set; }

        /// <summary>
        /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        /// </summary>
        /// <value>volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.</value>
        [DataMember(Name = "volumeMode", EmitDefaultValue = false)]
        public string VolumeMode { get; set; }

        /// <summary>
        /// VolumeName is the binding reference to the PersistentVolume backing this claim.
        /// </summary>
        /// <value>VolumeName is the binding reference to the PersistentVolume backing this claim.</value>
        [DataMember(Name = "volumeName", EmitDefaultValue = false)]
        public string VolumeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1PersistentVolumeClaimSpec {\n");
            sb.Append("  AccessModes: ").Append(AccessModes).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DataSourceRef: ").Append(DataSourceRef).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  StorageClassName: ").Append(StorageClassName).Append("\n");
            sb.Append("  VolumeMode: ").Append(VolumeMode).Append("\n");
            sb.Append("  VolumeName: ").Append(VolumeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
