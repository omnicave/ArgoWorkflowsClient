/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// KafkaTrigger refers to the specification of the Kafka trigger.
    /// </summary>
    [DataContract(Name = "io.argoproj.events.v1alpha1.KafkaTrigger")]
    public partial class IoArgoprojEventsV1alpha1KafkaTrigger : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoArgoprojEventsV1alpha1KafkaTrigger" /> class.
        /// </summary>
        /// <param name="compress">compress.</param>
        /// <param name="flushFrequency">flushFrequency.</param>
        /// <param name="parameters">Parameters is the list of parameters that is applied to resolved Kafka trigger object..</param>
        /// <param name="partition">Partition to write data to..</param>
        /// <param name="partitioningKey">The partitioning key for the messages put on the Kafka topic. Defaults to broker url. +optional..</param>
        /// <param name="payload">Payload is the list of key-value extracted from an event payload to construct the request payload..</param>
        /// <param name="requiredAcks">RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional..</param>
        /// <param name="sasl">sasl.</param>
        /// <param name="tls">tls.</param>
        /// <param name="topic">topic.</param>
        /// <param name="url">URL of the Kafka broker, multiple URLs separated by comma..</param>
        /// <param name="varVersion">varVersion.</param>
        public IoArgoprojEventsV1alpha1KafkaTrigger(bool compress = default(bool), int flushFrequency = default(int), List<IoArgoprojEventsV1alpha1TriggerParameter> parameters = default(List<IoArgoprojEventsV1alpha1TriggerParameter>), int partition = default(int), string partitioningKey = default(string), List<IoArgoprojEventsV1alpha1TriggerParameter> payload = default(List<IoArgoprojEventsV1alpha1TriggerParameter>), int requiredAcks = default(int), IoArgoprojEventsV1alpha1SASLConfig sasl = default(IoArgoprojEventsV1alpha1SASLConfig), IoArgoprojEventsV1alpha1TLSConfig tls = default(IoArgoprojEventsV1alpha1TLSConfig), string topic = default(string), string url = default(string), string varVersion = default(string))
        {
            this.Compress = compress;
            this.FlushFrequency = flushFrequency;
            this.Parameters = parameters;
            this.Partition = partition;
            this.PartitioningKey = partitioningKey;
            this.Payload = payload;
            this.RequiredAcks = requiredAcks;
            this.Sasl = sasl;
            this.Tls = tls;
            this.Topic = topic;
            this.Url = url;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Compress
        /// </summary>
        [DataMember(Name = "compress", EmitDefaultValue = true)]
        public bool Compress { get; set; }

        /// <summary>
        /// Gets or Sets FlushFrequency
        /// </summary>
        [DataMember(Name = "flushFrequency", EmitDefaultValue = false)]
        public int FlushFrequency { get; set; }

        /// <summary>
        /// Parameters is the list of parameters that is applied to resolved Kafka trigger object.
        /// </summary>
        /// <value>Parameters is the list of parameters that is applied to resolved Kafka trigger object.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1TriggerParameter> Parameters { get; set; }

        /// <summary>
        /// Partition to write data to.
        /// </summary>
        /// <value>Partition to write data to.</value>
        [DataMember(Name = "partition", EmitDefaultValue = false)]
        public int Partition { get; set; }

        /// <summary>
        /// The partitioning key for the messages put on the Kafka topic. Defaults to broker url. +optional.
        /// </summary>
        /// <value>The partitioning key for the messages put on the Kafka topic. Defaults to broker url. +optional.</value>
        [DataMember(Name = "partitioningKey", EmitDefaultValue = false)]
        public string PartitioningKey { get; set; }

        /// <summary>
        /// Payload is the list of key-value extracted from an event payload to construct the request payload.
        /// </summary>
        /// <value>Payload is the list of key-value extracted from an event payload to construct the request payload.</value>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public List<IoArgoprojEventsV1alpha1TriggerParameter> Payload { get; set; }

        /// <summary>
        /// RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.
        /// </summary>
        /// <value>RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.</value>
        [DataMember(Name = "requiredAcks", EmitDefaultValue = false)]
        public int RequiredAcks { get; set; }

        /// <summary>
        /// Gets or Sets Sasl
        /// </summary>
        [DataMember(Name = "sasl", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1SASLConfig Sasl { get; set; }

        /// <summary>
        /// Gets or Sets Tls
        /// </summary>
        [DataMember(Name = "tls", EmitDefaultValue = false)]
        public IoArgoprojEventsV1alpha1TLSConfig Tls { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public string Topic { get; set; }

        /// <summary>
        /// URL of the Kafka broker, multiple URLs separated by comma.
        /// </summary>
        /// <value>URL of the Kafka broker, multiple URLs separated by comma.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoArgoprojEventsV1alpha1KafkaTrigger {\n");
            sb.Append("  Compress: ").Append(Compress).Append("\n");
            sb.Append("  FlushFrequency: ").Append(FlushFrequency).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("  PartitioningKey: ").Append(PartitioningKey).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  RequiredAcks: ").Append(RequiredAcks).Append("\n");
            sb.Append("  Sasl: ").Append(Sasl).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
