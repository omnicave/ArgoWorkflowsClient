/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArgoWorkflowsClient.Client.OpenAPIDateConverter;

namespace ArgoWorkflowsClient.Model
{
    /// <summary>
    /// VolumeMount describes a mounting of a Volume within a container.
    /// </summary>
    [DataContract(Name = "io.k8s.api.core.v1.VolumeMount")]
    public partial class IoK8sApiCoreV1VolumeMount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1VolumeMount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1VolumeMount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1VolumeMount" /> class.
        /// </summary>
        /// <param name="mountPath">Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;. (required).</param>
        /// <param name="mountPropagation">mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10..</param>
        /// <param name="name">This must match the Name of a Volume. (required).</param>
        /// <param name="varReadOnly">Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false..</param>
        /// <param name="subPath">Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root)..</param>
        /// <param name="subPathExpr">Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container&#39;s environment. Defaults to \&quot;\&quot; (volume&#39;s root). SubPathExpr and SubPath are mutually exclusive..</param>
        public IoK8sApiCoreV1VolumeMount(string mountPath = default(string), string mountPropagation = default(string), string name = default(string), bool varReadOnly = default(bool), string subPath = default(string), string subPathExpr = default(string))
        {
            // to ensure "mountPath" is required (not null)
            if (mountPath == null)
            {
                throw new ArgumentNullException("mountPath is a required property for IoK8sApiCoreV1VolumeMount and cannot be null");
            }
            this.MountPath = mountPath;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IoK8sApiCoreV1VolumeMount and cannot be null");
            }
            this.Name = name;
            this.MountPropagation = mountPropagation;
            this.VarReadOnly = varReadOnly;
            this.SubPath = subPath;
            this.SubPathExpr = subPathExpr;
        }

        /// <summary>
        /// Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.
        /// </summary>
        /// <value>Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.</value>
        [DataMember(Name = "mountPath", IsRequired = true, EmitDefaultValue = true)]
        public string MountPath { get; set; }

        /// <summary>
        /// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        /// </summary>
        /// <value>mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.</value>
        [DataMember(Name = "mountPropagation", EmitDefaultValue = false)]
        public string MountPropagation { get; set; }

        /// <summary>
        /// This must match the Name of a Volume.
        /// </summary>
        /// <value>This must match the Name of a Volume.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        /// </summary>
        /// <value>Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.</value>
        [DataMember(Name = "readOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root).
        /// </summary>
        /// <value>Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root).</value>
        [DataMember(Name = "subPath", EmitDefaultValue = false)]
        public string SubPath { get; set; }

        /// <summary>
        /// Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container&#39;s environment. Defaults to \&quot;\&quot; (volume&#39;s root). SubPathExpr and SubPath are mutually exclusive.
        /// </summary>
        /// <value>Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container&#39;s environment. Defaults to \&quot;\&quot; (volume&#39;s root). SubPathExpr and SubPath are mutually exclusive.</value>
        [DataMember(Name = "subPathExpr", EmitDefaultValue = false)]
        public string SubPathExpr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1VolumeMount {\n");
            sb.Append("  MountPath: ").Append(MountPath).Append("\n");
            sb.Append("  MountPropagation: ").Append(MountPropagation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  SubPath: ").Append(SubPath).Append("\n");
            sb.Append("  SubPathExpr: ").Append(SubPathExpr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
