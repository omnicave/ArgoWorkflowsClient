/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArgoWorkflowsClient.Client;
using ArgoWorkflowsClient.Model;

namespace ArgoWorkflowsClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceCreateWorkflow(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceCreateWorkflowWithHttpInfo(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object WorkflowServiceDeleteWorkflow(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WorkflowServiceDeleteWorkflowWithHttpInfo(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceGetWorkflow(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceGetWorkflowWithHttpInfo(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceLintWorkflow(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceLintWorkflowWithHttpInfo(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1WorkflowList</returns>
        IoArgoprojWorkflowV1alpha1WorkflowList WorkflowServiceListWorkflows(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1WorkflowList</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowList> WorkflowServiceListWorkflowsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0);
        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry WorkflowServicePodLogs(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0);

        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServicePodLogsWithHttpInfo(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceResubmitWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResubmitWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceResumeWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResumeWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceRetryWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceRetryWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceSetWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSetWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceStopWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceStopWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceSubmitWorkflow(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSubmitWorkflowWithHttpInfo(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceSuspendWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSuspendWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceTerminateWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceTerminateWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoK8sApiCoreV1Event</returns>
        StreamResultOfIoK8sApiCoreV1Event WorkflowServiceWatchEvents(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoK8sApiCoreV1Event</returns>
        ApiResponse<StreamResultOfIoK8sApiCoreV1Event> WorkflowServiceWatchEventsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent</returns>
        StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent WorkflowServiceWatchWorkflows(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent</returns>
        ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> WorkflowServiceWatchWorkflowsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry WorkflowServiceWorkflowLogs(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServiceWorkflowLogsWithHttpInfo(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceCreateWorkflowAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceCreateWorkflowWithHttpInfoAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WorkflowServiceDeleteWorkflowAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowServiceDeleteWorkflowWithHttpInfoAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceGetWorkflowAsync(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceGetWorkflowWithHttpInfoAsync(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceLintWorkflowAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceLintWorkflowWithHttpInfoAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1WorkflowList</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1WorkflowList> WorkflowServiceListWorkflowsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1WorkflowList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowList>> WorkflowServiceListWorkflowsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        System.Threading.Tasks.Task<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServicePodLogsAsync(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>> WorkflowServicePodLogsWithHttpInfoAsync(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResubmitWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceResubmitWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResumeWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceResumeWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceRetryWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceRetryWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSetWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceSetWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceStopWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceStopWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSubmitWorkflowAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceSubmitWorkflowWithHttpInfoAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSuspendWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceSuspendWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceTerminateWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceTerminateWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoK8sApiCoreV1Event</returns>
        System.Threading.Tasks.Task<StreamResultOfIoK8sApiCoreV1Event> WorkflowServiceWatchEventsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoK8sApiCoreV1Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResultOfIoK8sApiCoreV1Event>> WorkflowServiceWatchEventsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent</returns>
        System.Threading.Tasks.Task<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> WorkflowServiceWatchWorkflowsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent>> WorkflowServiceWatchWorkflowsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        System.Threading.Tasks.Task<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServiceWorkflowLogsAsync(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>> WorkflowServiceWorkflowLogsWithHttpInfoAsync(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowServiceApi : IWorkflowServiceApiSync, IWorkflowServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowServiceApi : IWorkflowServiceApi
    {
        private ArgoWorkflowsClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowServiceApi(string basePath)
        {
            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                new ArgoWorkflowsClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowServiceApi(ArgoWorkflowsClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkflowServiceApi(ArgoWorkflowsClient.Client.ISynchronousClient client, ArgoWorkflowsClient.Client.IAsynchronousClient asyncClient, ArgoWorkflowsClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArgoWorkflowsClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArgoWorkflowsClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceCreateWorkflow(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceCreateWorkflowWithHttpInfo(varNamespace, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceCreateWorkflowWithHttpInfo(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceCreateWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceCreateWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceCreateWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceCreateWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceCreateWorkflowAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceCreateWorkflowWithHttpInfoAsync(varNamespace, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceCreateWorkflowWithHttpInfoAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceCreateWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceCreateWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceCreateWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceCreateWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object WorkflowServiceDeleteWorkflow(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<Object> localVarResponse = WorkflowServiceDeleteWorkflowWithHttpInfo(varNamespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<Object> WorkflowServiceDeleteWorkflowWithHttpInfo(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceDeleteWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceDeleteWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (deleteOptionsGracePeriodSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.gracePeriodSeconds", deleteOptionsGracePeriodSeconds));
            }
            if (deleteOptionsPreconditionsUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.uid", deleteOptionsPreconditionsUid));
            }
            if (deleteOptionsPreconditionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.resourceVersion", deleteOptionsPreconditionsResourceVersion));
            }
            if (deleteOptionsOrphanDependents != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.orphanDependents", deleteOptionsOrphanDependents));
            }
            if (deleteOptionsPropagationPolicy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.propagationPolicy", deleteOptionsPropagationPolicy));
            }
            if (deleteOptionsDryRun != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("multi", "deleteOptions.dryRun", deleteOptionsDryRun));
            }
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceDeleteWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/workflows/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceDeleteWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WorkflowServiceDeleteWorkflowAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<Object> localVarResponse = await WorkflowServiceDeleteWorkflowWithHttpInfoAsync(varNamespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<Object>> WorkflowServiceDeleteWorkflowWithHttpInfoAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceDeleteWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceDeleteWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (deleteOptionsGracePeriodSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.gracePeriodSeconds", deleteOptionsGracePeriodSeconds));
            }
            if (deleteOptionsPreconditionsUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.uid", deleteOptionsPreconditionsUid));
            }
            if (deleteOptionsPreconditionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.resourceVersion", deleteOptionsPreconditionsResourceVersion));
            }
            if (deleteOptionsOrphanDependents != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.orphanDependents", deleteOptionsOrphanDependents));
            }
            if (deleteOptionsPropagationPolicy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.propagationPolicy", deleteOptionsPropagationPolicy));
            }
            if (deleteOptionsDryRun != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("multi", "deleteOptions.dryRun", deleteOptionsDryRun));
            }
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceDeleteWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/workflows/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceDeleteWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceGetWorkflow(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceGetWorkflowWithHttpInfo(varNamespace, name, getOptionsResourceVersion, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceGetWorkflowWithHttpInfo(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceGetWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceGetWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (getOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "getOptions.resourceVersion", getOptionsResourceVersion));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceGetWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceGetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceGetWorkflowAsync(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceGetWorkflowWithHttpInfoAsync(varNamespace, name, getOptionsResourceVersion, fields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="getOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceGetWorkflowWithHttpInfoAsync(string varNamespace, string name, string? getOptionsResourceVersion = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceGetWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceGetWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (getOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "getOptions.resourceVersion", getOptionsResourceVersion));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceGetWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceGetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceLintWorkflow(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceLintWorkflowWithHttpInfo(varNamespace, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceLintWorkflowWithHttpInfo(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceLintWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceLintWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceLintWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/lint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceLintWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceLintWorkflowAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceLintWorkflowWithHttpInfoAsync(varNamespace, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceLintWorkflowWithHttpInfoAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowLintRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceLintWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceLintWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceLintWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/lint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceLintWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1WorkflowList</returns>
        public IoArgoprojWorkflowV1alpha1WorkflowList WorkflowServiceListWorkflows(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowList> localVarResponse = WorkflowServiceListWorkflowsWithHttpInfo(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1WorkflowList</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowList> WorkflowServiceListWorkflowsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceListWorkflows");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceListWorkflows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IoArgoprojWorkflowV1alpha1WorkflowList>("/api/v1/workflows/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceListWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1WorkflowList</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1WorkflowList> WorkflowServiceListWorkflowsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowList> localVarResponse = await WorkflowServiceListWorkflowsWithHttpInfoAsync(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields">Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1WorkflowList)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowList>> WorkflowServiceListWorkflowsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceListWorkflows");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceListWorkflows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IoArgoprojWorkflowV1alpha1WorkflowList>("/api/v1/workflows/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceListWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        public StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry WorkflowServicePodLogs(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> localVarResponse = WorkflowServicePodLogsWithHttpInfo(varNamespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServicePodLogsWithHttpInfo(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServicePodLogs");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServicePodLogs");
            }

            // verify the required parameter 'podName' is set
            if (podName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'podName' when calling WorkflowServiceApi->WorkflowServicePodLogs");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("podName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(podName)); // path parameter
            if (logOptionsContainer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.container", logOptionsContainer));
            }
            if (logOptionsFollow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.follow", logOptionsFollow));
            }
            if (logOptionsPrevious != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.previous", logOptionsPrevious));
            }
            if (logOptionsSinceSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceSeconds", logOptionsSinceSeconds));
            }
            if (logOptionsSinceTimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.seconds", logOptionsSinceTimeSeconds));
            }
            if (logOptionsSinceTimeNanos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.nanos", logOptionsSinceTimeNanos));
            }
            if (logOptionsTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.timestamps", logOptionsTimestamps));
            }
            if (logOptionsTailLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.tailLines", logOptionsTailLines));
            }
            if (logOptionsLimitBytes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.limitBytes", logOptionsLimitBytes));
            }
            if (logOptionsInsecureSkipTLSVerifyBackend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.insecureSkipTLSVerifyBackend", logOptionsInsecureSkipTLSVerifyBackend));
            }
            if (grep != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "grep", grep));
            }
            if (selector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "selector", selector));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServicePodLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>("/api/v1/workflows/{namespace}/{name}/{podName}/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServicePodLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        public async System.Threading.Tasks.Task<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServicePodLogsAsync(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> localVarResponse = await WorkflowServicePodLogsWithHttpInfoAsync(varNamespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"></param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>> WorkflowServicePodLogsWithHttpInfoAsync(string varNamespace, string name, string podName, string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServicePodLogs");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServicePodLogs");
            }

            // verify the required parameter 'podName' is set
            if (podName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'podName' when calling WorkflowServiceApi->WorkflowServicePodLogs");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("podName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(podName)); // path parameter
            if (logOptionsContainer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.container", logOptionsContainer));
            }
            if (logOptionsFollow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.follow", logOptionsFollow));
            }
            if (logOptionsPrevious != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.previous", logOptionsPrevious));
            }
            if (logOptionsSinceSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceSeconds", logOptionsSinceSeconds));
            }
            if (logOptionsSinceTimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.seconds", logOptionsSinceTimeSeconds));
            }
            if (logOptionsSinceTimeNanos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.nanos", logOptionsSinceTimeNanos));
            }
            if (logOptionsTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.timestamps", logOptionsTimestamps));
            }
            if (logOptionsTailLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.tailLines", logOptionsTailLines));
            }
            if (logOptionsLimitBytes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.limitBytes", logOptionsLimitBytes));
            }
            if (logOptionsInsecureSkipTLSVerifyBackend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.insecureSkipTLSVerifyBackend", logOptionsInsecureSkipTLSVerifyBackend));
            }
            if (grep != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "grep", grep));
            }
            if (selector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "selector", selector));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServicePodLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>("/api/v1/workflows/{namespace}/{name}/{podName}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServicePodLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceResubmitWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceResubmitWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResubmitWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceResubmitWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceResubmitWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceResubmitWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceResubmitWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/resubmit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceResubmitWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResubmitWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceResubmitWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceResubmitWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceResubmitWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceResubmitWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceResubmitWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceResubmitWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/resubmit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceResubmitWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceResumeWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceResumeWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResumeWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceResumeWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceResumeWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceResumeWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceResumeWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceResumeWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceResumeWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceResumeWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceResumeWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceResumeWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceResumeWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceResumeWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceResumeWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceResumeWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceRetryWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceRetryWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceRetryWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceRetryWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceRetryWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceRetryWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceRetryWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/retry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceRetryWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceRetryWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceRetryWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceRetryWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceRetryWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceRetryWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceRetryWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceRetryWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/retry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceRetryWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceSetWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceSetWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSetWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceSetWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceSetWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceSetWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceSetWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/set", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceSetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSetWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceSetWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceSetWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSetRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceSetWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceSetWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceSetWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceSetWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/set", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceSetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceStopWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceStopWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceStopWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceStopWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceStopWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceStopWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceStopWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceStopWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceStopWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceStopWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceStopWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowStopRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceStopWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceStopWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceStopWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceStopWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceStopWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceSubmitWorkflow(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceSubmitWorkflowWithHttpInfo(varNamespace, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSubmitWorkflowWithHttpInfo(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceSubmitWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceSubmitWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceSubmitWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/submit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceSubmitWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSubmitWorkflowAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceSubmitWorkflowWithHttpInfoAsync(varNamespace, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceSubmitWorkflowWithHttpInfoAsync(string varNamespace, IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceSubmitWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceSubmitWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceSubmitWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/submit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceSubmitWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceSuspendWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceSuspendWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSuspendWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceSuspendWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceSuspendWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceSuspendWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceSuspendWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/suspend", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceSuspendWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceSuspendWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceSuspendWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceSuspendWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceSuspendWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceSuspendWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceSuspendWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceSuspendWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/suspend", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceSuspendWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1Workflow</returns>
        public IoArgoprojWorkflowV1alpha1Workflow WorkflowServiceTerminateWorkflow(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = WorkflowServiceTerminateWorkflowWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceTerminateWorkflowWithHttpInfo(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceTerminateWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceTerminateWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceTerminateWorkflow");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceTerminateWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/terminate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceTerminateWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1Workflow</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1Workflow> WorkflowServiceTerminateWorkflowAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow> localVarResponse = await WorkflowServiceTerminateWorkflowWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1Workflow)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1Workflow>> WorkflowServiceTerminateWorkflowWithHttpInfoAsync(string varNamespace, string name, IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceTerminateWorkflow");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceTerminateWorkflow");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling WorkflowServiceApi->WorkflowServiceTerminateWorkflow");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceTerminateWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojWorkflowV1alpha1Workflow>("/api/v1/workflows/{namespace}/{name}/terminate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceTerminateWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoK8sApiCoreV1Event</returns>
        public StreamResultOfIoK8sApiCoreV1Event WorkflowServiceWatchEvents(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoK8sApiCoreV1Event> localVarResponse = WorkflowServiceWatchEventsWithHttpInfo(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoK8sApiCoreV1Event</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoK8sApiCoreV1Event> WorkflowServiceWatchEventsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceWatchEvents");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceWatchEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamResultOfIoK8sApiCoreV1Event>("/api/v1/stream/events/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceWatchEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoK8sApiCoreV1Event</returns>
        public async System.Threading.Tasks.Task<StreamResultOfIoK8sApiCoreV1Event> WorkflowServiceWatchEventsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoK8sApiCoreV1Event> localVarResponse = await WorkflowServiceWatchEventsWithHttpInfoAsync(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoK8sApiCoreV1Event)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoK8sApiCoreV1Event>> WorkflowServiceWatchEventsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceWatchEvents");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceWatchEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamResultOfIoK8sApiCoreV1Event>("/api/v1/stream/events/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceWatchEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent</returns>
        public StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent WorkflowServiceWatchWorkflows(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> localVarResponse = WorkflowServiceWatchWorkflowsWithHttpInfo(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> WorkflowServiceWatchWorkflowsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceWatchWorkflows");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceWatchWorkflows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent>("/api/v1/workflow-events/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceWatchWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent</returns>
        public async System.Threading.Tasks.Task<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> WorkflowServiceWatchWorkflowsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent> localVarResponse = await WorkflowServiceWatchWorkflowsWithHttpInfoAsync(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent>> WorkflowServiceWatchWorkflowsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), string? fields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceWatchWorkflows");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceWatchWorkflows";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent>("/api/v1/workflow-events/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceWatchWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        public StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry WorkflowServiceWorkflowLogs(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> localVarResponse = WorkflowServiceWorkflowLogsWithHttpInfo(varNamespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServiceWorkflowLogsWithHttpInfo(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceWorkflowLogs");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceWorkflowLogs");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (podName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podName", podName));
            }
            if (logOptionsContainer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.container", logOptionsContainer));
            }
            if (logOptionsFollow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.follow", logOptionsFollow));
            }
            if (logOptionsPrevious != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.previous", logOptionsPrevious));
            }
            if (logOptionsSinceSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceSeconds", logOptionsSinceSeconds));
            }
            if (logOptionsSinceTimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.seconds", logOptionsSinceTimeSeconds));
            }
            if (logOptionsSinceTimeNanos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.nanos", logOptionsSinceTimeNanos));
            }
            if (logOptionsTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.timestamps", logOptionsTimestamps));
            }
            if (logOptionsTailLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.tailLines", logOptionsTailLines));
            }
            if (logOptionsLimitBytes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.limitBytes", logOptionsLimitBytes));
            }
            if (logOptionsInsecureSkipTLSVerifyBackend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.insecureSkipTLSVerifyBackend", logOptionsInsecureSkipTLSVerifyBackend));
            }
            if (grep != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "grep", grep));
            }
            if (selector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "selector", selector));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceWorkflowLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>("/api/v1/workflows/{namespace}/{name}/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceWorkflowLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry</returns>
        public async System.Threading.Tasks.Task<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> WorkflowServiceWorkflowLogsAsync(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry> localVarResponse = await WorkflowServiceWorkflowLogsWithHttpInfoAsync(varNamespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="podName"> (optional)</param>
        /// <param name="logOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="logOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="logOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="logOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="logOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="logOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="logOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="logOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="grep"> (optional)</param>
        /// <param name="selector"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>> WorkflowServiceWorkflowLogsWithHttpInfoAsync(string varNamespace, string name, string? podName = default(string?), string? logOptionsContainer = default(string?), bool? logOptionsFollow = default(bool?), bool? logOptionsPrevious = default(bool?), string? logOptionsSinceSeconds = default(string?), string? logOptionsSinceTimeSeconds = default(string?), int? logOptionsSinceTimeNanos = default(int?), bool? logOptionsTimestamps = default(bool?), string? logOptionsTailLines = default(string?), string? logOptionsLimitBytes = default(string?), bool? logOptionsInsecureSkipTLSVerifyBackend = default(bool?), string? grep = default(string?), string? selector = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling WorkflowServiceApi->WorkflowServiceWorkflowLogs");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowServiceApi->WorkflowServiceWorkflowLogs");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (podName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podName", podName));
            }
            if (logOptionsContainer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.container", logOptionsContainer));
            }
            if (logOptionsFollow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.follow", logOptionsFollow));
            }
            if (logOptionsPrevious != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.previous", logOptionsPrevious));
            }
            if (logOptionsSinceSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceSeconds", logOptionsSinceSeconds));
            }
            if (logOptionsSinceTimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.seconds", logOptionsSinceTimeSeconds));
            }
            if (logOptionsSinceTimeNanos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.sinceTime.nanos", logOptionsSinceTimeNanos));
            }
            if (logOptionsTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.timestamps", logOptionsTimestamps));
            }
            if (logOptionsTailLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.tailLines", logOptionsTailLines));
            }
            if (logOptionsLimitBytes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.limitBytes", logOptionsLimitBytes));
            }
            if (logOptionsInsecureSkipTLSVerifyBackend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "logOptions.insecureSkipTLSVerifyBackend", logOptionsInsecureSkipTLSVerifyBackend));
            }
            if (grep != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "grep", grep));
            }
            if (selector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "selector", selector));
            }

            localVarRequestOptions.Operation = "WorkflowServiceApi.WorkflowServiceWorkflowLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry>("/api/v1/workflows/{namespace}/{name}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkflowServiceWorkflowLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
