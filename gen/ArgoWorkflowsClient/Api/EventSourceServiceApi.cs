/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArgoWorkflowsClient.Client;
using ArgoWorkflowsClient.Model;

namespace ArgoWorkflowsClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventSourceServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSource</returns>
        IoArgoprojEventsV1alpha1EventSource EventSourceServiceCreateEventSource(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSource</returns>
        ApiResponse<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceCreateEventSourceWithHttpInfo(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object EventSourceServiceDeleteEventSource(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EventSourceServiceDeleteEventSourceWithHttpInfo(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfEventsourceLogEntry</returns>
        StreamResultOfEventsourceLogEntry EventSourceServiceEventSourcesLogs(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfEventsourceLogEntry</returns>
        ApiResponse<StreamResultOfEventsourceLogEntry> EventSourceServiceEventSourcesLogsWithHttpInfo(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSource</returns>
        IoArgoprojEventsV1alpha1EventSource EventSourceServiceGetEventSource(string varNamespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSource</returns>
        ApiResponse<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceGetEventSourceWithHttpInfo(string varNamespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSourceList</returns>
        IoArgoprojEventsV1alpha1EventSourceList EventSourceServiceListEventSources(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSourceList</returns>
        ApiResponse<IoArgoprojEventsV1alpha1EventSourceList> EventSourceServiceListEventSourcesWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSource</returns>
        IoArgoprojEventsV1alpha1EventSource EventSourceServiceUpdateEventSource(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSource</returns>
        ApiResponse<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceUpdateEventSourceWithHttpInfo(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfEventsourceEventSourceWatchEvent</returns>
        StreamResultOfEventsourceEventSourceWatchEvent EventSourceServiceWatchEventSources(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfEventsourceEventSourceWatchEvent</returns>
        ApiResponse<StreamResultOfEventsourceEventSourceWatchEvent> EventSourceServiceWatchEventSourcesWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventSourceServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSource</returns>
        System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceCreateEventSourceAsync(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojEventsV1alpha1EventSource>> EventSourceServiceCreateEventSourceWithHttpInfoAsync(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EventSourceServiceDeleteEventSourceAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EventSourceServiceDeleteEventSourceWithHttpInfoAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfEventsourceLogEntry</returns>
        System.Threading.Tasks.Task<StreamResultOfEventsourceLogEntry> EventSourceServiceEventSourcesLogsAsync(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfEventsourceLogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResultOfEventsourceLogEntry>> EventSourceServiceEventSourcesLogsWithHttpInfoAsync(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSource</returns>
        System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceGetEventSourceAsync(string varNamespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojEventsV1alpha1EventSource>> EventSourceServiceGetEventSourceWithHttpInfoAsync(string varNamespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSourceList</returns>
        System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSourceList> EventSourceServiceListEventSourcesAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSourceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojEventsV1alpha1EventSourceList>> EventSourceServiceListEventSourcesWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSource</returns>
        System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceUpdateEventSourceAsync(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojEventsV1alpha1EventSource>> EventSourceServiceUpdateEventSourceWithHttpInfoAsync(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfEventsourceEventSourceWatchEvent</returns>
        System.Threading.Tasks.Task<StreamResultOfEventsourceEventSourceWatchEvent> EventSourceServiceWatchEventSourcesAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfEventsourceEventSourceWatchEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResultOfEventsourceEventSourceWatchEvent>> EventSourceServiceWatchEventSourcesWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventSourceServiceApi : IEventSourceServiceApiSync, IEventSourceServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventSourceServiceApi : IEventSourceServiceApi
    {
        private ArgoWorkflowsClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSourceServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventSourceServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSourceServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventSourceServiceApi(string basePath)
        {
            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                new ArgoWorkflowsClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSourceServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventSourceServiceApi(ArgoWorkflowsClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventSourceServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventSourceServiceApi(ArgoWorkflowsClient.Client.ISynchronousClient client, ArgoWorkflowsClient.Client.IAsynchronousClient asyncClient, ArgoWorkflowsClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArgoWorkflowsClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArgoWorkflowsClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSource</returns>
        public IoArgoprojEventsV1alpha1EventSource EventSourceServiceCreateEventSource(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> localVarResponse = EventSourceServiceCreateEventSourceWithHttpInfo(varNamespace, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSource</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceCreateEventSourceWithHttpInfo(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceCreateEventSource");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling EventSourceServiceApi->EventSourceServiceCreateEventSource");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceCreateEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IoArgoprojEventsV1alpha1EventSource>("/api/v1/event-sources/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceCreateEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSource</returns>
        public async System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceCreateEventSourceAsync(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> localVarResponse = await EventSourceServiceCreateEventSourceWithHttpInfoAsync(varNamespace, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSource)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource>> EventSourceServiceCreateEventSourceWithHttpInfoAsync(string varNamespace, EventsourceCreateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceCreateEventSource");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling EventSourceServiceApi->EventSourceServiceCreateEventSource");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceCreateEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IoArgoprojEventsV1alpha1EventSource>("/api/v1/event-sources/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceCreateEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object EventSourceServiceDeleteEventSource(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<Object> localVarResponse = EventSourceServiceDeleteEventSourceWithHttpInfo(varNamespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<Object> EventSourceServiceDeleteEventSourceWithHttpInfo(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceDeleteEventSource");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling EventSourceServiceApi->EventSourceServiceDeleteEventSource");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (deleteOptionsGracePeriodSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.gracePeriodSeconds", deleteOptionsGracePeriodSeconds));
            }
            if (deleteOptionsPreconditionsUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.uid", deleteOptionsPreconditionsUid));
            }
            if (deleteOptionsPreconditionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.resourceVersion", deleteOptionsPreconditionsResourceVersion));
            }
            if (deleteOptionsOrphanDependents != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.orphanDependents", deleteOptionsOrphanDependents));
            }
            if (deleteOptionsPropagationPolicy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.propagationPolicy", deleteOptionsPropagationPolicy));
            }
            if (deleteOptionsDryRun != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("multi", "deleteOptions.dryRun", deleteOptionsDryRun));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceDeleteEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/event-sources/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceDeleteEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EventSourceServiceDeleteEventSourceAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<Object> localVarResponse = await EventSourceServiceDeleteEventSourceWithHttpInfoAsync(varNamespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="deleteOptionsGracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsUid">Specifies the target UID. +optional. (optional)</param>
        /// <param name="deleteOptionsPreconditionsResourceVersion">Specifies the target ResourceVersion +optional. (optional)</param>
        /// <param name="deleteOptionsOrphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional. (optional)</param>
        /// <param name="deleteOptionsPropagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground. +optional. (optional)</param>
        /// <param name="deleteOptionsDryRun">When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<Object>> EventSourceServiceDeleteEventSourceWithHttpInfoAsync(string varNamespace, string name, string? deleteOptionsGracePeriodSeconds = default(string?), string? deleteOptionsPreconditionsUid = default(string?), string? deleteOptionsPreconditionsResourceVersion = default(string?), bool? deleteOptionsOrphanDependents = default(bool?), string? deleteOptionsPropagationPolicy = default(string?), List<string>? deleteOptionsDryRun = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceDeleteEventSource");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling EventSourceServiceApi->EventSourceServiceDeleteEventSource");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (deleteOptionsGracePeriodSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.gracePeriodSeconds", deleteOptionsGracePeriodSeconds));
            }
            if (deleteOptionsPreconditionsUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.uid", deleteOptionsPreconditionsUid));
            }
            if (deleteOptionsPreconditionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.preconditions.resourceVersion", deleteOptionsPreconditionsResourceVersion));
            }
            if (deleteOptionsOrphanDependents != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.orphanDependents", deleteOptionsOrphanDependents));
            }
            if (deleteOptionsPropagationPolicy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "deleteOptions.propagationPolicy", deleteOptionsPropagationPolicy));
            }
            if (deleteOptionsDryRun != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("multi", "deleteOptions.dryRun", deleteOptionsDryRun));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceDeleteEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/event-sources/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceDeleteEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfEventsourceLogEntry</returns>
        public StreamResultOfEventsourceLogEntry EventSourceServiceEventSourcesLogs(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceLogEntry> localVarResponse = EventSourceServiceEventSourcesLogsWithHttpInfo(varNamespace, name, eventSourceType, eventName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfEventsourceLogEntry</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceLogEntry> EventSourceServiceEventSourcesLogsWithHttpInfo(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceEventSourcesLogs");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (eventSourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "eventSourceType", eventSourceType));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }
            if (grep != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "grep", grep));
            }
            if (podLogOptionsContainer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.container", podLogOptionsContainer));
            }
            if (podLogOptionsFollow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.follow", podLogOptionsFollow));
            }
            if (podLogOptionsPrevious != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.previous", podLogOptionsPrevious));
            }
            if (podLogOptionsSinceSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.sinceSeconds", podLogOptionsSinceSeconds));
            }
            if (podLogOptionsSinceTimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.sinceTime.seconds", podLogOptionsSinceTimeSeconds));
            }
            if (podLogOptionsSinceTimeNanos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.sinceTime.nanos", podLogOptionsSinceTimeNanos));
            }
            if (podLogOptionsTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.timestamps", podLogOptionsTimestamps));
            }
            if (podLogOptionsTailLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.tailLines", podLogOptionsTailLines));
            }
            if (podLogOptionsLimitBytes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.limitBytes", podLogOptionsLimitBytes));
            }
            if (podLogOptionsInsecureSkipTLSVerifyBackend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.insecureSkipTLSVerifyBackend", podLogOptionsInsecureSkipTLSVerifyBackend));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceEventSourcesLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamResultOfEventsourceLogEntry>("/api/v1/stream/event-sources/{namespace}/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceEventSourcesLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfEventsourceLogEntry</returns>
        public async System.Threading.Tasks.Task<StreamResultOfEventsourceLogEntry> EventSourceServiceEventSourcesLogsAsync(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceLogEntry> localVarResponse = await EventSourceServiceEventSourcesLogsWithHttpInfoAsync(varNamespace, name, eventSourceType, eventName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name">optional - only return entries for this event source. (optional)</param>
        /// <param name="eventSourceType">optional - only return entries for this event source type (e.g. &#x60;webhook&#x60;). (optional)</param>
        /// <param name="eventName">optional - only return entries for this event name (e.g. &#x60;example&#x60;). (optional)</param>
        /// <param name="grep">optional - only return entries where &#x60;msg&#x60; matches this regular expression. (optional)</param>
        /// <param name="podLogOptionsContainer">The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional. (optional)</param>
        /// <param name="podLogOptionsFollow">Follow the log stream of the pod. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsPrevious">Return previous terminated container logs. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceSeconds">A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional. (optional)</param>
        /// <param name="podLogOptionsSinceTimeSeconds">Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)</param>
        /// <param name="podLogOptionsSinceTimeNanos">Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)</param>
        /// <param name="podLogOptionsTimestamps">If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional. (optional)</param>
        /// <param name="podLogOptionsTailLines">If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional. (optional)</param>
        /// <param name="podLogOptionsLimitBytes">If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional. (optional)</param>
        /// <param name="podLogOptionsInsecureSkipTLSVerifyBackend">insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#39;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfEventsourceLogEntry)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceLogEntry>> EventSourceServiceEventSourcesLogsWithHttpInfoAsync(string varNamespace, string? name = default(string?), string? eventSourceType = default(string?), string? eventName = default(string?), string? grep = default(string?), string? podLogOptionsContainer = default(string?), bool? podLogOptionsFollow = default(bool?), bool? podLogOptionsPrevious = default(bool?), string? podLogOptionsSinceSeconds = default(string?), string? podLogOptionsSinceTimeSeconds = default(string?), int? podLogOptionsSinceTimeNanos = default(int?), bool? podLogOptionsTimestamps = default(bool?), string? podLogOptionsTailLines = default(string?), string? podLogOptionsLimitBytes = default(string?), bool? podLogOptionsInsecureSkipTLSVerifyBackend = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceEventSourcesLogs");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (eventSourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "eventSourceType", eventSourceType));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }
            if (grep != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "grep", grep));
            }
            if (podLogOptionsContainer != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.container", podLogOptionsContainer));
            }
            if (podLogOptionsFollow != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.follow", podLogOptionsFollow));
            }
            if (podLogOptionsPrevious != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.previous", podLogOptionsPrevious));
            }
            if (podLogOptionsSinceSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.sinceSeconds", podLogOptionsSinceSeconds));
            }
            if (podLogOptionsSinceTimeSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.sinceTime.seconds", podLogOptionsSinceTimeSeconds));
            }
            if (podLogOptionsSinceTimeNanos != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.sinceTime.nanos", podLogOptionsSinceTimeNanos));
            }
            if (podLogOptionsTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.timestamps", podLogOptionsTimestamps));
            }
            if (podLogOptionsTailLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.tailLines", podLogOptionsTailLines));
            }
            if (podLogOptionsLimitBytes != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.limitBytes", podLogOptionsLimitBytes));
            }
            if (podLogOptionsInsecureSkipTLSVerifyBackend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "podLogOptions.insecureSkipTLSVerifyBackend", podLogOptionsInsecureSkipTLSVerifyBackend));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceEventSourcesLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamResultOfEventsourceLogEntry>("/api/v1/stream/event-sources/{namespace}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceEventSourcesLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSource</returns>
        public IoArgoprojEventsV1alpha1EventSource EventSourceServiceGetEventSource(string varNamespace, string name, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> localVarResponse = EventSourceServiceGetEventSourceWithHttpInfo(varNamespace, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSource</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceGetEventSourceWithHttpInfo(string varNamespace, string name, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceGetEventSource");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling EventSourceServiceApi->EventSourceServiceGetEventSource");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceGetEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IoArgoprojEventsV1alpha1EventSource>("/api/v1/event-sources/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceGetEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSource</returns>
        public async System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceGetEventSourceAsync(string varNamespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> localVarResponse = await EventSourceServiceGetEventSourceWithHttpInfoAsync(varNamespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSource)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource>> EventSourceServiceGetEventSourceWithHttpInfoAsync(string varNamespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceGetEventSource");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling EventSourceServiceApi->EventSourceServiceGetEventSource");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceGetEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IoArgoprojEventsV1alpha1EventSource>("/api/v1/event-sources/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceGetEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSourceList</returns>
        public IoArgoprojEventsV1alpha1EventSourceList EventSourceServiceListEventSources(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSourceList> localVarResponse = EventSourceServiceListEventSourcesWithHttpInfo(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSourceList</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSourceList> EventSourceServiceListEventSourcesWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceListEventSources");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceListEventSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IoArgoprojEventsV1alpha1EventSourceList>("/api/v1/event-sources/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceListEventSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSourceList</returns>
        public async System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSourceList> EventSourceServiceListEventSourcesAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSourceList> localVarResponse = await EventSourceServiceListEventSourcesWithHttpInfoAsync(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSourceList)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSourceList>> EventSourceServiceListEventSourcesWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceListEventSources");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceListEventSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IoArgoprojEventsV1alpha1EventSourceList>("/api/v1/event-sources/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceListEventSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojEventsV1alpha1EventSource</returns>
        public IoArgoprojEventsV1alpha1EventSource EventSourceServiceUpdateEventSource(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> localVarResponse = EventSourceServiceUpdateEventSourceWithHttpInfo(varNamespace, name, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojEventsV1alpha1EventSource</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceUpdateEventSourceWithHttpInfo(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceUpdateEventSource");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling EventSourceServiceApi->EventSourceServiceUpdateEventSource");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling EventSourceServiceApi->EventSourceServiceUpdateEventSource");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceUpdateEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<IoArgoprojEventsV1alpha1EventSource>("/api/v1/event-sources/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceUpdateEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojEventsV1alpha1EventSource</returns>
        public async System.Threading.Tasks.Task<IoArgoprojEventsV1alpha1EventSource> EventSourceServiceUpdateEventSourceAsync(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource> localVarResponse = await EventSourceServiceUpdateEventSourceWithHttpInfoAsync(varNamespace, name, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojEventsV1alpha1EventSource)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojEventsV1alpha1EventSource>> EventSourceServiceUpdateEventSourceWithHttpInfoAsync(string varNamespace, string name, EventsourceUpdateEventSourceRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceUpdateEventSource");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling EventSourceServiceApi->EventSourceServiceUpdateEventSource");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling EventSourceServiceApi->EventSourceServiceUpdateEventSource");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceUpdateEventSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<IoArgoprojEventsV1alpha1EventSource>("/api/v1/event-sources/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceUpdateEventSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamResultOfEventsourceEventSourceWatchEvent</returns>
        public StreamResultOfEventsourceEventSourceWatchEvent EventSourceServiceWatchEventSources(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceEventSourceWatchEvent> localVarResponse = EventSourceServiceWatchEventSourcesWithHttpInfo(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamResultOfEventsourceEventSourceWatchEvent</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceEventSourceWatchEvent> EventSourceServiceWatchEventSourcesWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceWatchEventSources");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceWatchEventSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamResultOfEventsourceEventSourceWatchEvent>("/api/v1/stream/event-sources/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceWatchEventSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamResultOfEventsourceEventSourceWatchEvent</returns>
        public async System.Threading.Tasks.Task<StreamResultOfEventsourceEventSourceWatchEvent> EventSourceServiceWatchEventSourcesAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceEventSourceWatchEvent> localVarResponse = await EventSourceServiceWatchEventSourcesWithHttpInfoAsync(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamResultOfEventsourceEventSourceWatchEvent)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<StreamResultOfEventsourceEventSourceWatchEvent>> EventSourceServiceWatchEventSourcesWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventSourceServiceApi->EventSourceServiceWatchEventSources");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "EventSourceServiceApi.EventSourceServiceWatchEventSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamResultOfEventsourceEventSourceWatchEvent>("/api/v1/stream/event-sources/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventSourceServiceWatchEventSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
