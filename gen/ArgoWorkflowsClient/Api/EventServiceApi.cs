/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArgoWorkflowsClient.Client;
using ArgoWorkflowsClient.Model;

namespace ArgoWorkflowsClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1WorkflowEventBindingList</returns>
        IoArgoprojWorkflowV1alpha1WorkflowEventBindingList EventServiceListWorkflowEventBindings(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1WorkflowEventBindingList</returns>
        ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> EventServiceListWorkflowEventBindingsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object EventServiceReceiveEvent(string varNamespace, string discriminator, Object body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EventServiceReceiveEventWithHttpInfo(string varNamespace, string discriminator, Object body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1WorkflowEventBindingList</returns>
        System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> EventServiceListWorkflowEventBindingsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1WorkflowEventBindingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList>> EventServiceListWorkflowEventBindingsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EventServiceReceiveEventAsync(string varNamespace, string discriminator, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EventServiceReceiveEventWithHttpInfoAsync(string varNamespace, string discriminator, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventServiceApi : IEventServiceApiSync, IEventServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventServiceApi : IEventServiceApi
    {
        private ArgoWorkflowsClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventServiceApi(string basePath)
        {
            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                new ArgoWorkflowsClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventServiceApi(ArgoWorkflowsClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventServiceApi(ArgoWorkflowsClient.Client.ISynchronousClient client, ArgoWorkflowsClient.Client.IAsynchronousClient asyncClient, ArgoWorkflowsClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArgoWorkflowsClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArgoWorkflowsClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IoArgoprojWorkflowV1alpha1WorkflowEventBindingList</returns>
        public IoArgoprojWorkflowV1alpha1WorkflowEventBindingList EventServiceListWorkflowEventBindings(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> localVarResponse = EventServiceListWorkflowEventBindingsWithHttpInfo(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IoArgoprojWorkflowV1alpha1WorkflowEventBindingList</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> EventServiceListWorkflowEventBindingsWithHttpInfo(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventServiceApi->EventServiceListWorkflowEventBindings");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "EventServiceApi.EventServiceListWorkflowEventBindings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList>("/api/v1/workflow-event-bindings/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventServiceListWorkflowEventBindings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IoArgoprojWorkflowV1alpha1WorkflowEventBindingList</returns>
        public async System.Threading.Tasks.Task<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> EventServiceListWorkflowEventBindingsAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList> localVarResponse = await EventServiceListWorkflowEventBindingsWithHttpInfoAsync(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="listOptionsLabelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsFieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional. (optional)</param>
        /// <param name="listOptionsWatch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional. (optional)</param>
        /// <param name="listOptionsAllowWatchBookmarks">allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional. (optional)</param>
        /// <param name="listOptionsResourceVersion">resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsResourceVersionMatch">resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional (optional)</param>
        /// <param name="listOptionsTimeoutSeconds">Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional. (optional)</param>
        /// <param name="listOptionsLimit">limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. (optional)</param>
        /// <param name="listOptionsContinue">The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IoArgoprojWorkflowV1alpha1WorkflowEventBindingList)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList>> EventServiceListWorkflowEventBindingsWithHttpInfoAsync(string varNamespace, string? listOptionsLabelSelector = default(string?), string? listOptionsFieldSelector = default(string?), bool? listOptionsWatch = default(bool?), bool? listOptionsAllowWatchBookmarks = default(bool?), string? listOptionsResourceVersion = default(string?), string? listOptionsResourceVersionMatch = default(string?), string? listOptionsTimeoutSeconds = default(string?), string? listOptionsLimit = default(string?), string? listOptionsContinue = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventServiceApi->EventServiceListWorkflowEventBindings");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            if (listOptionsLabelSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.labelSelector", listOptionsLabelSelector));
            }
            if (listOptionsFieldSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.fieldSelector", listOptionsFieldSelector));
            }
            if (listOptionsWatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.watch", listOptionsWatch));
            }
            if (listOptionsAllowWatchBookmarks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.allowWatchBookmarks", listOptionsAllowWatchBookmarks));
            }
            if (listOptionsResourceVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersion", listOptionsResourceVersion));
            }
            if (listOptionsResourceVersionMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.resourceVersionMatch", listOptionsResourceVersionMatch));
            }
            if (listOptionsTimeoutSeconds != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.timeoutSeconds", listOptionsTimeoutSeconds));
            }
            if (listOptionsLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.limit", listOptionsLimit));
            }
            if (listOptionsContinue != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArgoWorkflowsClient.Client.ClientUtils.ParameterToMultiMap("", "listOptions.continue", listOptionsContinue));
            }

            localVarRequestOptions.Operation = "EventServiceApi.EventServiceListWorkflowEventBindings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IoArgoprojWorkflowV1alpha1WorkflowEventBindingList>("/api/v1/workflow-event-bindings/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventServiceListWorkflowEventBindings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object EventServiceReceiveEvent(string varNamespace, string discriminator, Object body, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<Object> localVarResponse = EventServiceReceiveEventWithHttpInfo(varNamespace, discriminator, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<Object> EventServiceReceiveEventWithHttpInfo(string varNamespace, string discriminator, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventServiceApi->EventServiceReceiveEvent");
            }

            // verify the required parameter 'discriminator' is set
            if (discriminator == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'discriminator' when calling EventServiceApi->EventServiceReceiveEvent");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling EventServiceApi->EventServiceReceiveEvent");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("discriminator", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(discriminator)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventServiceApi.EventServiceReceiveEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/events/{namespace}/{discriminator}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventServiceReceiveEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EventServiceReceiveEventAsync(string varNamespace, string discriminator, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<Object> localVarResponse = await EventServiceReceiveEventWithHttpInfoAsync(varNamespace, discriminator, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace">The namespace for the io.argoproj.workflow.v1alpha1. This can be empty if the client has cluster scoped permissions. If empty, then the event is \&quot;broadcast\&quot; to workflow event binding in all namespaces.</param>
        /// <param name="discriminator">Optional discriminator for the io.argoproj.workflow.v1alpha1. This should almost always be empty. Used for edge-cases where the event payload alone is not provide enough information to discriminate the event. This MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or to support webhooks on unsecured server. Instead, use access tokens. This is made available as &#x60;discriminator&#x60; in the event binding selector (&#x60;/spec/event/selector)&#x60;</param>
        /// <param name="body">The event itself can be any data.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<Object>> EventServiceReceiveEventWithHttpInfoAsync(string varNamespace, string discriminator, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling EventServiceApi->EventServiceReceiveEvent");
            }

            // verify the required parameter 'discriminator' is set
            if (discriminator == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'discriminator' when calling EventServiceApi->EventServiceReceiveEvent");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'body' when calling EventServiceApi->EventServiceReceiveEvent");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("discriminator", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(discriminator)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventServiceApi.EventServiceReceiveEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/events/{namespace}/{discriminator}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventServiceReceiveEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
