/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArgoWorkflowsClient.Client;
using ArgoWorkflowsClient.Model;

namespace ArgoWorkflowsClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtifactServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an artifact.
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ArtifactServiceGetArtifactFile(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0);

        /// <summary>
        /// Get an artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ArtifactServiceGetArtifactFileWithHttpInfo(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0);
        /// <summary>
        /// Get an input artifact.
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ArtifactServiceGetInputArtifact(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0);

        /// <summary>
        /// Get an input artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ArtifactServiceGetInputArtifactWithHttpInfo(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0);
        /// <summary>
        /// Get an input artifact by UID.
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ArtifactServiceGetInputArtifactByUID(string uid, string nodeId, string artifactName, int operationIndex = 0);

        /// <summary>
        /// Get an input artifact by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ArtifactServiceGetInputArtifactByUIDWithHttpInfo(string uid, string nodeId, string artifactName, int operationIndex = 0);
        /// <summary>
        /// Get an output artifact.
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ArtifactServiceGetOutputArtifact(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0);

        /// <summary>
        /// Get an output artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ArtifactServiceGetOutputArtifactWithHttpInfo(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0);
        /// <summary>
        /// Get an output artifact by UID.
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ArtifactServiceGetOutputArtifactByUID(string uid, string nodeId, string artifactName, int operationIndex = 0);

        /// <summary>
        /// Get an output artifact by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ArtifactServiceGetOutputArtifactByUIDWithHttpInfo(string uid, string nodeId, string artifactName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtifactServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get an artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetArtifactFileAsync(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ArtifactServiceGetArtifactFileWithHttpInfoAsync(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an input artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetInputArtifactAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an input artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ArtifactServiceGetInputArtifactWithHttpInfoAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an input artifact by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetInputArtifactByUIDAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an input artifact by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ArtifactServiceGetInputArtifactByUIDWithHttpInfoAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an output artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetOutputArtifactAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an output artifact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ArtifactServiceGetOutputArtifactWithHttpInfoAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an output artifact by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetOutputArtifactByUIDAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an output artifact by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ArtifactServiceGetOutputArtifactByUIDWithHttpInfoAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtifactServiceApi : IArtifactServiceApiSync, IArtifactServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArtifactServiceApi : IArtifactServiceApi
    {
        private ArgoWorkflowsClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArtifactServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArtifactServiceApi(string basePath)
        {
            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                new ArgoWorkflowsClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArtifactServiceApi(ArgoWorkflowsClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArgoWorkflowsClient.Client.Configuration.MergeConfigurations(
                ArgoWorkflowsClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArgoWorkflowsClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArtifactServiceApi(ArgoWorkflowsClient.Client.ISynchronousClient client, ArgoWorkflowsClient.Client.IAsynchronousClient asyncClient, ArgoWorkflowsClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArgoWorkflowsClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArgoWorkflowsClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArgoWorkflowsClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArgoWorkflowsClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get an artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ArtifactServiceGetArtifactFile(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ArtifactServiceGetArtifactFileWithHttpInfo(varNamespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> ArtifactServiceGetArtifactFileWithHttpInfo(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'idDiscriminator' is set
            if (idDiscriminator == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'idDiscriminator' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'id' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'artifactDiscriminator' is set
            if (artifactDiscriminator == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactDiscriminator' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("idDiscriminator", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(idDiscriminator)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactDiscriminator", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactDiscriminator)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetArtifactFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetArtifactFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetArtifactFileAsync(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ArtifactServiceGetArtifactFileWithHttpInfoAsync(varNamespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="idDiscriminator"></param>
        /// <param name="id"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="artifactDiscriminator"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream>> ArtifactServiceGetArtifactFileWithHttpInfoAsync(string varNamespace, string idDiscriminator, string id, string nodeId, string artifactName, string artifactDiscriminator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'idDiscriminator' is set
            if (idDiscriminator == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'idDiscriminator' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'id' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }

            // verify the required parameter 'artifactDiscriminator' is set
            if (artifactDiscriminator == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactDiscriminator' when calling ArtifactServiceApi->ArtifactServiceGetArtifactFile");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("idDiscriminator", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(idDiscriminator)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactDiscriminator", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactDiscriminator)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetArtifactFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetArtifactFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an input artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ArtifactServiceGetInputArtifact(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ArtifactServiceGetInputArtifactWithHttpInfo(varNamespace, name, nodeId, artifactName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an input artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> ArtifactServiceGetInputArtifactWithHttpInfo(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetInputArtifact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetInputArtifact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an input artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetInputArtifactAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ArtifactServiceGetInputArtifactWithHttpInfoAsync(varNamespace, name, nodeId, artifactName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an input artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream>> ArtifactServiceGetInputArtifactWithHttpInfoAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifact");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetInputArtifact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetInputArtifact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an input artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ArtifactServiceGetInputArtifactByUID(string uid, string nodeId, string artifactName, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ArtifactServiceGetInputArtifactByUIDWithHttpInfo(uid, nodeId, artifactName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an input artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> ArtifactServiceGetInputArtifactByUIDWithHttpInfo(string uid, string nodeId, string artifactName, int operationIndex = 0)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'uid' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifactByUID");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifactByUID");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifactByUID");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uid", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(uid)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetInputArtifactByUID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetInputArtifactByUID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an input artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetInputArtifactByUIDAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ArtifactServiceGetInputArtifactByUIDWithHttpInfoAsync(uid, nodeId, artifactName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an input artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream>> ArtifactServiceGetInputArtifactByUIDWithHttpInfoAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'uid' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifactByUID");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifactByUID");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetInputArtifactByUID");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uid", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(uid)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetInputArtifactByUID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetInputArtifactByUID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an output artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ArtifactServiceGetOutputArtifact(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ArtifactServiceGetOutputArtifactWithHttpInfo(varNamespace, name, nodeId, artifactName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an output artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> ArtifactServiceGetOutputArtifactWithHttpInfo(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0)
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetOutputArtifact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/artifacts/{namespace}/{name}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetOutputArtifact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an output artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetOutputArtifactAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ArtifactServiceGetOutputArtifactWithHttpInfoAsync(varNamespace, name, nodeId, artifactName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an output artifact. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varNamespace"></param>
        /// <param name="name"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream>> ArtifactServiceGetOutputArtifactWithHttpInfoAsync(string varNamespace, string name, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varNamespace' is set
            if (varNamespace == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'varNamespace' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'name' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifact");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(varNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetOutputArtifact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/artifacts/{namespace}/{name}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetOutputArtifact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an output artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ArtifactServiceGetOutputArtifactByUID(string uid, string nodeId, string artifactName, int operationIndex = 0)
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = ArtifactServiceGetOutputArtifactByUIDWithHttpInfo(uid, nodeId, artifactName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an output artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> ArtifactServiceGetOutputArtifactByUIDWithHttpInfo(string uid, string nodeId, string artifactName, int operationIndex = 0)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'uid' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifactByUID");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifactByUID");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifactByUID");
            }

            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uid", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(uid)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetOutputArtifactByUID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/artifacts-by-uid/{uid}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetOutputArtifactByUID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an output artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ArtifactServiceGetOutputArtifactByUIDAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await ArtifactServiceGetOutputArtifactByUIDWithHttpInfoAsync(uid, nodeId, artifactName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an output artifact by UID. 
        /// </summary>
        /// <exception cref="ArgoWorkflowsClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="nodeId"></param>
        /// <param name="artifactName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ArgoWorkflowsClient.Client.ApiResponse<System.IO.Stream>> ArtifactServiceGetOutputArtifactByUIDWithHttpInfoAsync(string uid, string nodeId, string artifactName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'uid' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifactByUID");
            }

            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'nodeId' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifactByUID");
            }

            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
            {
                throw new ArgoWorkflowsClient.Client.ApiException(400, "Missing required parameter 'artifactName' when calling ArtifactServiceApi->ArtifactServiceGetOutputArtifactByUID");
            }


            ArgoWorkflowsClient.Client.RequestOptions localVarRequestOptions = new ArgoWorkflowsClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArgoWorkflowsClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uid", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(uid)); // path parameter
            localVarRequestOptions.PathParameters.Add("nodeId", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(nodeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("artifactName", ArgoWorkflowsClient.Client.ClientUtils.ParameterToString(artifactName)); // path parameter

            localVarRequestOptions.Operation = "ArtifactServiceApi.ArtifactServiceGetOutputArtifactByUID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BearerToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/artifacts-by-uid/{uid}/{nodeId}/{artifactName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtifactServiceGetOutputArtifactByUID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
