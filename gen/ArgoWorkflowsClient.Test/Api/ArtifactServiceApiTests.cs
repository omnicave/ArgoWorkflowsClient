/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ArgoWorkflowsClient.Client;
using ArgoWorkflowsClient.Api;
// uncomment below to import models
//using ArgoWorkflowsClient.Model;

namespace ArgoWorkflowsClient.Test.Api
{
    /// <summary>
    ///  Class for testing ArtifactServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ArtifactServiceApiTests : IDisposable
    {
        private ArtifactServiceApi instance;

        public ArtifactServiceApiTests()
        {
            instance = new ArtifactServiceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ArtifactServiceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ArtifactServiceApi
            //Assert.IsType<ArtifactServiceApi>(instance);
        }

        /// <summary>
        /// Test ArtifactServiceGetArtifactFile
        /// </summary>
        [Fact]
        public void ArtifactServiceGetArtifactFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string idDiscriminator = null;
            //string id = null;
            //string nodeId = null;
            //string artifactName = null;
            //string artifactDiscriminator = null;
            //var response = instance.ArtifactServiceGetArtifactFile(varNamespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test ArtifactServiceGetInputArtifact
        /// </summary>
        [Fact]
        public void ArtifactServiceGetInputArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string name = null;
            //string nodeId = null;
            //string artifactName = null;
            //var response = instance.ArtifactServiceGetInputArtifact(varNamespace, name, nodeId, artifactName);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test ArtifactServiceGetInputArtifactByUID
        /// </summary>
        [Fact]
        public void ArtifactServiceGetInputArtifactByUIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string nodeId = null;
            //string artifactName = null;
            //var response = instance.ArtifactServiceGetInputArtifactByUID(uid, nodeId, artifactName);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test ArtifactServiceGetOutputArtifact
        /// </summary>
        [Fact]
        public void ArtifactServiceGetOutputArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string name = null;
            //string nodeId = null;
            //string artifactName = null;
            //var response = instance.ArtifactServiceGetOutputArtifact(varNamespace, name, nodeId, artifactName);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test ArtifactServiceGetOutputArtifactByUID
        /// </summary>
        [Fact]
        public void ArtifactServiceGetOutputArtifactByUIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string nodeId = null;
            //string artifactName = null;
            //var response = instance.ArtifactServiceGetOutputArtifactByUID(uid, nodeId, artifactName);
            //Assert.IsType<System.IO.Stream>(response);
        }
    }
}
