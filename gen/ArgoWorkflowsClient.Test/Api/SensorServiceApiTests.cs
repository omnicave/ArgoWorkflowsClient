/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ArgoWorkflowsClient.Client;
using ArgoWorkflowsClient.Api;
// uncomment below to import models
//using ArgoWorkflowsClient.Model;

namespace ArgoWorkflowsClient.Test.Api
{
    /// <summary>
    ///  Class for testing SensorServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SensorServiceApiTests : IDisposable
    {
        private SensorServiceApi instance;

        public SensorServiceApiTests()
        {
            instance = new SensorServiceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SensorServiceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SensorServiceApi
            //Assert.IsType<SensorServiceApi>(instance);
        }

        /// <summary>
        /// Test SensorServiceCreateSensor
        /// </summary>
        [Fact]
        public void SensorServiceCreateSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //SensorCreateSensorRequest body = null;
            //var response = instance.SensorServiceCreateSensor(varNamespace, body);
            //Assert.IsType<IoArgoprojEventsV1alpha1Sensor>(response);
        }

        /// <summary>
        /// Test SensorServiceDeleteSensor
        /// </summary>
        [Fact]
        public void SensorServiceDeleteSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string name = null;
            //string? deleteOptionsGracePeriodSeconds = null;
            //string? deleteOptionsPreconditionsUid = null;
            //string? deleteOptionsPreconditionsResourceVersion = null;
            //bool? deleteOptionsOrphanDependents = null;
            //string? deleteOptionsPropagationPolicy = null;
            //List<string>? deleteOptionsDryRun = null;
            //var response = instance.SensorServiceDeleteSensor(varNamespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SensorServiceGetSensor
        /// </summary>
        [Fact]
        public void SensorServiceGetSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string name = null;
            //string? getOptionsResourceVersion = null;
            //var response = instance.SensorServiceGetSensor(varNamespace, name, getOptionsResourceVersion);
            //Assert.IsType<IoArgoprojEventsV1alpha1Sensor>(response);
        }

        /// <summary>
        /// Test SensorServiceListSensors
        /// </summary>
        [Fact]
        public void SensorServiceListSensorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string? listOptionsLabelSelector = null;
            //string? listOptionsFieldSelector = null;
            //bool? listOptionsWatch = null;
            //bool? listOptionsAllowWatchBookmarks = null;
            //string? listOptionsResourceVersion = null;
            //string? listOptionsResourceVersionMatch = null;
            //string? listOptionsTimeoutSeconds = null;
            //string? listOptionsLimit = null;
            //string? listOptionsContinue = null;
            //var response = instance.SensorServiceListSensors(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);
            //Assert.IsType<IoArgoprojEventsV1alpha1SensorList>(response);
        }

        /// <summary>
        /// Test SensorServiceSensorsLogs
        /// </summary>
        [Fact]
        public void SensorServiceSensorsLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string? name = null;
            //string? triggerName = null;
            //string? grep = null;
            //string? podLogOptionsContainer = null;
            //bool? podLogOptionsFollow = null;
            //bool? podLogOptionsPrevious = null;
            //string? podLogOptionsSinceSeconds = null;
            //string? podLogOptionsSinceTimeSeconds = null;
            //int? podLogOptionsSinceTimeNanos = null;
            //bool? podLogOptionsTimestamps = null;
            //string? podLogOptionsTailLines = null;
            //string? podLogOptionsLimitBytes = null;
            //bool? podLogOptionsInsecureSkipTLSVerifyBackend = null;
            //var response = instance.SensorServiceSensorsLogs(varNamespace, name, triggerName, grep, podLogOptionsContainer, podLogOptionsFollow, podLogOptionsPrevious, podLogOptionsSinceSeconds, podLogOptionsSinceTimeSeconds, podLogOptionsSinceTimeNanos, podLogOptionsTimestamps, podLogOptionsTailLines, podLogOptionsLimitBytes, podLogOptionsInsecureSkipTLSVerifyBackend);
            //Assert.IsType<StreamResultOfSensorLogEntry>(response);
        }

        /// <summary>
        /// Test SensorServiceUpdateSensor
        /// </summary>
        [Fact]
        public void SensorServiceUpdateSensorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string name = null;
            //SensorUpdateSensorRequest body = null;
            //var response = instance.SensorServiceUpdateSensor(varNamespace, name, body);
            //Assert.IsType<IoArgoprojEventsV1alpha1Sensor>(response);
        }

        /// <summary>
        /// Test SensorServiceWatchSensors
        /// </summary>
        [Fact]
        public void SensorServiceWatchSensorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varNamespace = null;
            //string? listOptionsLabelSelector = null;
            //string? listOptionsFieldSelector = null;
            //bool? listOptionsWatch = null;
            //bool? listOptionsAllowWatchBookmarks = null;
            //string? listOptionsResourceVersion = null;
            //string? listOptionsResourceVersionMatch = null;
            //string? listOptionsTimeoutSeconds = null;
            //string? listOptionsLimit = null;
            //string? listOptionsContinue = null;
            //var response = instance.SensorServiceWatchSensors(varNamespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);
            //Assert.IsType<StreamResultOfSensorSensorWatchEvent>(response);
        }
    }
}
